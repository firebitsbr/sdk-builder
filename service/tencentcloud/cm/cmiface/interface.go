// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package cmiface provides an interface to enable mocking the Cloud Monitor service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package cmiface

import (
	"github.com/polefishu/sdk-builder/sdf"
	"github.com/polefishu/sdk-builder/sdf/request"
	"github.com/polefishu/sdk-builder/service/cm"
)

// CMAPI provides an interface to enable mocking the
// cm.CM service client's API operation,
// paginators, and waiters. This make unit testing your code that calls out
// to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the SDK's request pipeline.
//
//    // myFunc uses an SDK service client to make a request to
//    // Cloud Monitor.
//    func myFunc(svc cmiface.CMAPI) bool {
//        // Make svc.DescribeBaseMetrics request
//    }
//
//    func main() {
//        sess := session.New()
//        svc := cm.New(sess)
//
//        myFunc(svc)
//    }
//
// In your _test.go file:
//
//    // Define a mock struct to be used in your unit tests of myFunc.
//    type mockCMClient struct {
//        cmiface.CMAPI
//    }
//    func (m *mockCMClient) DescribeBaseMetrics(input *cm.DescribeBaseMetricsInput) (*cm.DescribeBaseMetricsOutput, error) {
//        // mock response/functionality
//    }
//
//    func TestMyFunc(t *testing.T) {
//        // Setup Test
//        mockSvc := &mockCMClient{}
//
//        myfunc(mockSvc)
//
//        // Verify myFunc's functionality
//    }
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type CMAPI interface {
	DescribeBaseMetrics(*cm.DescribeBaseMetricsInput) (*cm.DescribeBaseMetricsOutput, error)
	DescribeBaseMetricsWithContext(sdf.Context, *cm.DescribeBaseMetricsInput, ...request.Option) (*cm.DescribeBaseMetricsOutput, error)
	DescribeBaseMetricsRequest(*cm.DescribeBaseMetricsInput) (*request.Request, *cm.DescribeBaseMetricsOutput)

	GetMonitorData(*cm.GetMonitorDataInput) (*cm.GetMonitorDataOutput, error)
	GetMonitorDataWithContext(sdf.Context, *cm.GetMonitorDataInput, ...request.Option) (*cm.GetMonitorDataOutput, error)
	GetMonitorDataRequest(*cm.GetMonitorDataInput) (*request.Request, *cm.GetMonitorDataOutput)
}

var _ CMAPI = (*cm.CM)(nil)
