// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cm

import (
	"github.com/polefishu/sdk-builder/sdf"
	"github.com/polefishu/sdk-builder/sdf/request"
	"github.com/polefishu/sdk-builder/sdf/sdfutil"
)

const opDescribeBaseMetrics = "DescribeBaseMetrics"

// DescribeBaseMetricsRequest generates a "aws/request.Request" representing the
// client's request for the DescribeBaseMetrics operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeBaseMetrics for more information on using the DescribeBaseMetrics
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeBaseMetricsRequest method.
//    req, resp := client.DescribeBaseMetricsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CM) DescribeBaseMetricsRequest(input *DescribeBaseMetricsInput) (req *request.Request, output *DescribeBaseMetricsOutput) {
	op := &request.Operation{
		Name:       opDescribeBaseMetrics,
		HTTPMethod: "GET",
		HTTPPath:   "/v2/index.php",
	}

	if input == nil {
		input = &DescribeBaseMetricsInput{}
	}

	output = &DescribeBaseMetricsOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DescribeBaseMetrics API operation for Cloud Monitor.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Cloud Monitor's
// API operation DescribeBaseMetrics for usage and error information.
func (c *CM) DescribeBaseMetrics(input *DescribeBaseMetricsInput) (*DescribeBaseMetricsOutput, error) {
	req, out := c.DescribeBaseMetricsRequest(input)
	return out, req.Send()
}

// DescribeBaseMetricsWithContext is the same as DescribeBaseMetrics with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeBaseMetrics for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CM) DescribeBaseMetricsWithContext(ctx sdf.Context, input *DescribeBaseMetricsInput, opts ...request.Option) (*DescribeBaseMetricsOutput, error) {
	req, out := c.DescribeBaseMetricsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetMonitorData = "GetMonitorData"

// GetMonitorDataRequest generates a "aws/request.Request" representing the
// client's request for the GetMonitorData operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See GetMonitorData for more information on using the GetMonitorData
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the GetMonitorDataRequest method.
//    req, resp := client.GetMonitorDataRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CM) GetMonitorDataRequest(input *GetMonitorDataInput) (req *request.Request, output *GetMonitorDataOutput) {
	op := &request.Operation{
		Name:       opGetMonitorData,
		HTTPMethod: "GET",
		HTTPPath:   "/v2/index.php",
	}

	if input == nil {
		input = &GetMonitorDataInput{}
	}

	output = &GetMonitorDataOutput{}
	req = c.newRequest(op, input, output)
	return
}

// GetMonitorData API operation for Cloud Monitor.
//
// 本接口 (DescribeInstances) 用于查询一个或多个实例的详细信息。
//
// 接口请求域名：cvm.api.qcloud.com
//
//    * 可以根据实例ID、实例名称或者实例计费模式等信息来查询实例的详细信息。过滤信息详细请见过滤器Filter。
//    * 如果参数为空，返回当前用户一定数量（Limit所指定的数量，默认为20）的实例。
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Cloud Monitor's
// API operation GetMonitorData for usage and error information.
func (c *CM) GetMonitorData(input *GetMonitorDataInput) (*GetMonitorDataOutput, error) {
	req, out := c.GetMonitorDataRequest(input)
	return out, req.Send()
}

// GetMonitorDataWithContext is the same as GetMonitorData with the addition of
// the ability to pass a context and additional request options.
//
// See GetMonitorData for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CM) GetMonitorDataWithContext(ctx sdf.Context, input *GetMonitorDataInput, opts ...request.Option) (*GetMonitorDataOutput, error) {
	req, out := c.GetMonitorDataRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeBaseMetricsInput struct {
	_ struct{} `type:"structure"`

	MetricName *string `locationName:"metricName" type:"string"`

	// Namespace is a required field
	Namespace *string `locationName:"namespace" type:"string" required:"true"`

	Region *string `type:"string" enum:"RegionEnum"`
}

// String returns the string representation
func (s DescribeBaseMetricsInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeBaseMetricsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeBaseMetricsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeBaseMetricsInput"}
	if s.Namespace == nil {
		invalidParams.Add(request.NewErrParamRequired("Namespace"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetMetricName sets the MetricName field's value.
func (s *DescribeBaseMetricsInput) SetMetricName(v string) *DescribeBaseMetricsInput {
	s.MetricName = &v
	return s
}

// SetNamespace sets the Namespace field's value.
func (s *DescribeBaseMetricsInput) SetNamespace(v string) *DescribeBaseMetricsInput {
	s.Namespace = &v
	return s
}

// SetRegion sets the Region field's value.
func (s *DescribeBaseMetricsInput) SetRegion(v string) *DescribeBaseMetricsInput {
	s.Region = &v
	return s
}

type DescribeBaseMetricsOutput struct {
	_ struct{} `type:"structure"`

	Code *int64 `locationName:"code" type:"integer"`

	CodeDesc *string `locationName:"codeDesc" type:"string"`

	Message *string `locationName:"message" type:"string"`

	MetricSet []*Metric `locationName:"metricSet" type:"list"`
}

// String returns the string representation
func (s DescribeBaseMetricsOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeBaseMetricsOutput) GoString() string {
	return s.String()
}

// SetCode sets the Code field's value.
func (s *DescribeBaseMetricsOutput) SetCode(v int64) *DescribeBaseMetricsOutput {
	s.Code = &v
	return s
}

// SetCodeDesc sets the CodeDesc field's value.
func (s *DescribeBaseMetricsOutput) SetCodeDesc(v string) *DescribeBaseMetricsOutput {
	s.CodeDesc = &v
	return s
}

// SetMessage sets the Message field's value.
func (s *DescribeBaseMetricsOutput) SetMessage(v string) *DescribeBaseMetricsOutput {
	s.Message = &v
	return s
}

// SetMetricSet sets the MetricSet field's value.
func (s *DescribeBaseMetricsOutput) SetMetricSet(v []*Metric) *DescribeBaseMetricsOutput {
	s.MetricSet = v
	return s
}

type DimensionsFilter struct {
	_ struct{} `type:"structure"`

	Name *string `locationName:"name" type:"string"`

	Values *string `locationName:"value" type:"string"`
}

// String returns the string representation
func (s DimensionsFilter) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DimensionsFilter) GoString() string {
	return s.String()
}

// SetName sets the Name field's value.
func (s *DimensionsFilter) SetName(v string) *DimensionsFilter {
	s.Name = &v
	return s
}

// SetValues sets the Values field's value.
func (s *DimensionsFilter) SetValues(v string) *DimensionsFilter {
	s.Values = &v
	return s
}

type GetMonitorDataInput struct {
	_ struct{} `type:"structure"`

	EndTime *string `locationName:"endTime" type:"string"`

	Filters []*DimensionsFilter `locationName:"dimensions" type:"list" flattened:"true"`

	MetricName *string `locationName:"metricName" type:"string"`

	Namespace *string `locationName:"namespace" type:"string"`

	Period *int64 `locationName:"period" type:"integer"`

	Region *string `type:"string" enum:"RegionEnum"`

	StartTime *string `locationName:"startTime" type:"string"`
}

// String returns the string representation
func (s GetMonitorDataInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s GetMonitorDataInput) GoString() string {
	return s.String()
}

// SetEndTime sets the EndTime field's value.
func (s *GetMonitorDataInput) SetEndTime(v string) *GetMonitorDataInput {
	s.EndTime = &v
	return s
}

// SetFilters sets the Filters field's value.
func (s *GetMonitorDataInput) SetFilters(v []*DimensionsFilter) *GetMonitorDataInput {
	s.Filters = v
	return s
}

// SetMetricName sets the MetricName field's value.
func (s *GetMonitorDataInput) SetMetricName(v string) *GetMonitorDataInput {
	s.MetricName = &v
	return s
}

// SetNamespace sets the Namespace field's value.
func (s *GetMonitorDataInput) SetNamespace(v string) *GetMonitorDataInput {
	s.Namespace = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *GetMonitorDataInput) SetPeriod(v int64) *GetMonitorDataInput {
	s.Period = &v
	return s
}

// SetRegion sets the Region field's value.
func (s *GetMonitorDataInput) SetRegion(v string) *GetMonitorDataInput {
	s.Region = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *GetMonitorDataInput) SetStartTime(v string) *GetMonitorDataInput {
	s.StartTime = &v
	return s
}

type GetMonitorDataOutput struct {
	_ struct{} `type:"structure"`

	Code *int64 `locationName:"code" type:"integer"`

	CodeDesc *string `locationName:"codeDesc" type:"string"`

	DataPoints []*float64 `locationName:"dataPoints" type:"list"`

	EndTime *string `locationName:"endTime" type:"string"`

	Message *string `locationName:"message" type:"string"`

	MetricName *string `locationName:"metricName" type:"string"`

	Period *string `locationName:"period" type:"string"`

	StartTime *string `locationName:"startTime" type:"string"`
}

// String returns the string representation
func (s GetMonitorDataOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s GetMonitorDataOutput) GoString() string {
	return s.String()
}

// SetCode sets the Code field's value.
func (s *GetMonitorDataOutput) SetCode(v int64) *GetMonitorDataOutput {
	s.Code = &v
	return s
}

// SetCodeDesc sets the CodeDesc field's value.
func (s *GetMonitorDataOutput) SetCodeDesc(v string) *GetMonitorDataOutput {
	s.CodeDesc = &v
	return s
}

// SetDataPoints sets the DataPoints field's value.
func (s *GetMonitorDataOutput) SetDataPoints(v []*float64) *GetMonitorDataOutput {
	s.DataPoints = v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *GetMonitorDataOutput) SetEndTime(v string) *GetMonitorDataOutput {
	s.EndTime = &v
	return s
}

// SetMessage sets the Message field's value.
func (s *GetMonitorDataOutput) SetMessage(v string) *GetMonitorDataOutput {
	s.Message = &v
	return s
}

// SetMetricName sets the MetricName field's value.
func (s *GetMonitorDataOutput) SetMetricName(v string) *GetMonitorDataOutput {
	s.MetricName = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *GetMonitorDataOutput) SetPeriod(v string) *GetMonitorDataOutput {
	s.Period = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *GetMonitorDataOutput) SetStartTime(v string) *GetMonitorDataOutput {
	s.StartTime = &v
	return s
}

type Metric struct {
	_ struct{} `type:"structure"`

	Dimensions *string `locationName:"dimensions" type:"string"`

	MetricCName *string `locationName:"metricCname" type:"string"`

	MetricName *string `locationName:"metricName" type:"string"`

	Namespace *string `locationName:"namespace" type:"string"`

	Period []*int64 `locationName:"period" type:"list"`

	Unit *string `locationName:"unit" type:"string"`

	UnitCname *string `locationName:"unitCname" type:"string"`
}

// String returns the string representation
func (s Metric) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s Metric) GoString() string {
	return s.String()
}

// SetDimensions sets the Dimensions field's value.
func (s *Metric) SetDimensions(v string) *Metric {
	s.Dimensions = &v
	return s
}

// SetMetricCName sets the MetricCName field's value.
func (s *Metric) SetMetricCName(v string) *Metric {
	s.MetricCName = &v
	return s
}

// SetMetricName sets the MetricName field's value.
func (s *Metric) SetMetricName(v string) *Metric {
	s.MetricName = &v
	return s
}

// SetNamespace sets the Namespace field's value.
func (s *Metric) SetNamespace(v string) *Metric {
	s.Namespace = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *Metric) SetPeriod(v []*int64) *Metric {
	s.Period = v
	return s
}

// SetUnit sets the Unit field's value.
func (s *Metric) SetUnit(v string) *Metric {
	s.Unit = &v
	return s
}

// SetUnitCname sets the UnitCname field's value.
func (s *Metric) SetUnitCname(v string) *Metric {
	s.UnitCname = &v
	return s
}

const (
	// RegionEnumApBeijing is a RegionEnum enum value
	RegionEnumApBeijing = "ap-beijing"

	// RegionEnumApChengdu is a RegionEnum enum value
	RegionEnumApChengdu = "ap-chengdu"

	// RegionEnumApGuangzhou is a RegionEnum enum value
	RegionEnumApGuangzhou = "ap-guangzhou"

	// RegionEnumApGuangzhouOpen is a RegionEnum enum value
	RegionEnumApGuangzhouOpen = "ap-guangzhou-open"

	// RegionEnumApHongkong is a RegionEnum enum value
	RegionEnumApHongkong = "ap-hongkong"

	// RegionEnumApShanghai is a RegionEnum enum value
	RegionEnumApShanghai = "ap-shanghai"

	// RegionEnumApSingapore is a RegionEnum enum value
	RegionEnumApSingapore = "ap-singapore"

	// RegionEnumEuFrankfurt is a RegionEnum enum value
	RegionEnumEuFrankfurt = "eu-frankfurt"

	// RegionEnumNaSiliconvalley is a RegionEnum enum value
	RegionEnumNaSiliconvalley = "na-siliconvalley"

	// RegionEnumNaToronto is a RegionEnum enum value
	RegionEnumNaToronto = "na-toronto"

	// RegionEnumApShanghaiFsi is a RegionEnum enum value
	RegionEnumApShanghaiFsi = "ap-shanghai-fsi"

	// RegionEnumApShenzhenFsi is a RegionEnum enum value
	RegionEnumApShenzhenFsi = "ap-shenzhen-fsi"
)
