// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cvm

import (
	"github.com/polefishu/sdk-builder/sdf"
	"github.com/polefishu/sdk-builder/sdf/request"
	"github.com/polefishu/sdk-builder/sdf/sdfutil"
)

const opDescribeImages = "DescribeImages"

// DescribeImagesRequest generates a "aws/request.Request" representing the
// client's request for the DescribeImages operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeImages for more information on using the DescribeImages
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeImagesRequest method.
//    req, resp := client.DescribeImagesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CVM) DescribeImagesRequest(input *DescribeImagesInput) (req *request.Request, output *DescribeImagesOutput) {
	op := &request.Operation{
		Name:       opDescribeImages,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeImagesInput{}
	}

	output = &DescribeImagesOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DescribeImages API operation for Cloud Virtual Machine.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Cloud Virtual Machine's
// API operation DescribeImages for usage and error information.
func (c *CVM) DescribeImages(input *DescribeImagesInput) (*DescribeImagesOutput, error) {
	req, out := c.DescribeImagesRequest(input)
	return out, req.Send()
}

// DescribeImagesWithContext is the same as DescribeImages with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeImages for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CVM) DescribeImagesWithContext(ctx sdf.Context, input *DescribeImagesInput, opts ...request.Option) (*DescribeImagesOutput, error) {
	req, out := c.DescribeImagesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstances = "DescribeInstances"

// DescribeInstancesRequest generates a "aws/request.Request" representing the
// client's request for the DescribeInstances operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeInstances for more information on using the DescribeInstances
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeInstancesRequest method.
//    req, resp := client.DescribeInstancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CVM) DescribeInstancesRequest(input *DescribeInstancesInput) (req *request.Request, output *DescribeInstancesOutput) {
	op := &request.Operation{
		Name:       opDescribeInstances,
		HTTPMethod: "GET",
		HTTPPath:   "/",
		Paginator: &request.Paginator{
			InputTokens:     []string{"Offset"},
			OutputTokens:    []string{"Response.TotalCount"},
			LimitToken:      "Limit",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &DescribeInstancesInput{}
	}

	output = &DescribeInstancesOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DescribeInstances API operation for Cloud Virtual Machine.
//
// 本接口 (DescribeInstances) 用于查询一个或多个实例的详细信息。
//
// 接口请求域名：cvm.api.qcloud.com
//
//    * 可以根据实例ID、实例名称或者实例计费模式等信息来查询实例的详细信息。过滤信息详细请见过滤器Filter。
//    * 如果参数为空，返回当前用户一定数量（Limit所指定的数量，默认为20）的实例。
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Cloud Virtual Machine's
// API operation DescribeInstances for usage and error information.
func (c *CVM) DescribeInstances(input *DescribeInstancesInput) (*DescribeInstancesOutput, error) {
	req, out := c.DescribeInstancesRequest(input)
	return out, req.Send()
}

// DescribeInstancesWithContext is the same as DescribeInstances with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CVM) DescribeInstancesWithContext(ctx sdf.Context, input *DescribeInstancesInput, opts ...request.Option) (*DescribeInstancesOutput, error) {
	req, out := c.DescribeInstancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

// DescribeInstancesPages iterates over the pages of a DescribeInstances operation,
// calling the "fn" function with the response data for each page. To stop
// iterating, return false from the fn function.
//
// See DescribeInstances method for more information on how to use this operation.
//
// Note: This operation can generate multiple requests to a service.
//
//    // Example iterating over at most 3 pages of a DescribeInstances operation.
//    pageNum := 0
//    err := client.DescribeInstancesPages(params,
//        func(page *DescribeInstancesOutput, lastPage bool) bool {
//            pageNum++
//            fmt.Println(page)
//            return pageNum <= 3
//        })
//
func (c *CVM) DescribeInstancesPages(input *DescribeInstancesInput, fn func(*DescribeInstancesOutput, bool) bool) error {
	return c.DescribeInstancesPagesWithContext(sdf.BackgroundContext(), input, fn)
}

// DescribeInstancesPagesWithContext same as DescribeInstancesPages except
// it takes a Context and allows setting request options on the pages.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CVM) DescribeInstancesPagesWithContext(ctx sdf.Context, input *DescribeInstancesInput, fn func(*DescribeInstancesOutput, bool) bool, opts ...request.Option) error {
	p := request.Pagination{
		NewRequest: func() (*request.Request, error) {
			var inCpy *DescribeInstancesInput
			if input != nil {
				tmp := *input
				inCpy = &tmp
			}
			req, _ := c.DescribeInstancesRequest(inCpy)
			req.SetContext(ctx)
			req.ApplyOptions(opts...)
			return req, nil
		},
	}

	cont := true
	for p.Next() && cont {
		cont = fn(p.Page().(*DescribeInstancesOutput), !p.HasNextPage())
	}
	return p.Err()
}

const opDescribeInstancesStatus = "DescribeInstancesStatus"

// DescribeInstancesStatusRequest generates a "aws/request.Request" representing the
// client's request for the DescribeInstancesStatus operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeInstancesStatus for more information on using the DescribeInstancesStatus
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeInstancesStatusRequest method.
//    req, resp := client.DescribeInstancesStatusRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CVM) DescribeInstancesStatusRequest(input *DescribeInstancesStatusInput) (req *request.Request, output *DescribeInstancesStatusOutput) {
	op := &request.Operation{
		Name:       opDescribeInstancesStatus,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeInstancesStatusInput{}
	}

	output = &DescribeInstancesStatusOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DescribeInstancesStatus API operation for Cloud Virtual Machine.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Cloud Virtual Machine's
// API operation DescribeInstancesStatus for usage and error information.
func (c *CVM) DescribeInstancesStatus(input *DescribeInstancesStatusInput) (*DescribeInstancesStatusOutput, error) {
	req, out := c.DescribeInstancesStatusRequest(input)
	return out, req.Send()
}

// DescribeInstancesStatusWithContext is the same as DescribeInstancesStatus with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstancesStatus for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CVM) DescribeInstancesStatusWithContext(ctx sdf.Context, input *DescribeInstancesStatusInput, opts ...request.Option) (*DescribeInstancesStatusOutput, error) {
	req, out := c.DescribeInstancesStatusRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRebootInstances = "RebootInstances"

// RebootInstancesRequest generates a "aws/request.Request" representing the
// client's request for the RebootInstances operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See RebootInstances for more information on using the RebootInstances
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the RebootInstancesRequest method.
//    req, resp := client.RebootInstancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CVM) RebootInstancesRequest(input *RebootInstancesInput) (req *request.Request, output *RebootInstancesOutput) {
	op := &request.Operation{
		Name:       opRebootInstances,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RebootInstancesInput{}
	}

	output = &RebootInstancesOutput{}
	req = c.newRequest(op, input, output)
	return
}

// RebootInstances API operation for Cloud Virtual Machine.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Cloud Virtual Machine's
// API operation RebootInstances for usage and error information.
func (c *CVM) RebootInstances(input *RebootInstancesInput) (*RebootInstancesOutput, error) {
	req, out := c.RebootInstancesRequest(input)
	return out, req.Send()
}

// RebootInstancesWithContext is the same as RebootInstances with the addition of
// the ability to pass a context and additional request options.
//
// See RebootInstances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CVM) RebootInstancesWithContext(ctx sdf.Context, input *RebootInstancesInput, opts ...request.Option) (*RebootInstancesOutput, error) {
	req, out := c.RebootInstancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRunInstances = "RunInstances"

// RunInstancesRequest generates a "aws/request.Request" representing the
// client's request for the RunInstances operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See RunInstances for more information on using the RunInstances
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the RunInstancesRequest method.
//    req, resp := client.RunInstancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CVM) RunInstancesRequest(input *RunInstancesInput) (req *request.Request, output *RunInstancesOutput) {
	op := &request.Operation{
		Name:       opRunInstances,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RunInstancesInput{}
	}

	output = &RunInstancesOutput{}
	req = c.newRequest(op, input, output)
	return
}

// RunInstances API operation for Cloud Virtual Machine.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Cloud Virtual Machine's
// API operation RunInstances for usage and error information.
func (c *CVM) RunInstances(input *RunInstancesInput) (*RunInstancesOutput, error) {
	req, out := c.RunInstancesRequest(input)
	return out, req.Send()
}

// RunInstancesWithContext is the same as RunInstances with the addition of
// the ability to pass a context and additional request options.
//
// See RunInstances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CVM) RunInstancesWithContext(ctx sdf.Context, input *RunInstancesInput, opts ...request.Option) (*RunInstancesOutput, error) {
	req, out := c.RunInstancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStartInstances = "StartInstances"

// StartInstancesRequest generates a "aws/request.Request" representing the
// client's request for the StartInstances operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See StartInstances for more information on using the StartInstances
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the StartInstancesRequest method.
//    req, resp := client.StartInstancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CVM) StartInstancesRequest(input *StartInstancesInput) (req *request.Request, output *StartInstancesOutput) {
	op := &request.Operation{
		Name:       opStartInstances,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &StartInstancesInput{}
	}

	output = &StartInstancesOutput{}
	req = c.newRequest(op, input, output)
	return
}

// StartInstances API operation for Cloud Virtual Machine.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Cloud Virtual Machine's
// API operation StartInstances for usage and error information.
func (c *CVM) StartInstances(input *StartInstancesInput) (*StartInstancesOutput, error) {
	req, out := c.StartInstancesRequest(input)
	return out, req.Send()
}

// StartInstancesWithContext is the same as StartInstances with the addition of
// the ability to pass a context and additional request options.
//
// See StartInstances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CVM) StartInstancesWithContext(ctx sdf.Context, input *StartInstancesInput, opts ...request.Option) (*StartInstancesOutput, error) {
	req, out := c.StartInstancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStopInstances = "StopInstances"

// StopInstancesRequest generates a "aws/request.Request" representing the
// client's request for the StopInstances operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See StopInstances for more information on using the StopInstances
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the StopInstancesRequest method.
//    req, resp := client.StopInstancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CVM) StopInstancesRequest(input *StopInstancesInput) (req *request.Request, output *StopInstancesOutput) {
	op := &request.Operation{
		Name:       opStopInstances,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &StopInstancesInput{}
	}

	output = &StopInstancesOutput{}
	req = c.newRequest(op, input, output)
	return
}

// StopInstances API operation for Cloud Virtual Machine.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Cloud Virtual Machine's
// API operation StopInstances for usage and error information.
func (c *CVM) StopInstances(input *StopInstancesInput) (*StopInstancesOutput, error) {
	req, out := c.StopInstancesRequest(input)
	return out, req.Send()
}

// StopInstancesWithContext is the same as StopInstances with the addition of
// the ability to pass a context and additional request options.
//
// See StopInstances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CVM) StopInstancesWithContext(ctx sdf.Context, input *StopInstancesInput, opts ...request.Option) (*StopInstancesOutput, error) {
	req, out := c.StopInstancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opTerminateInstances = "TerminateInstances"

// TerminateInstancesRequest generates a "aws/request.Request" representing the
// client's request for the TerminateInstances operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See TerminateInstances for more information on using the TerminateInstances
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the TerminateInstancesRequest method.
//    req, resp := client.TerminateInstancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CVM) TerminateInstancesRequest(input *TerminateInstancesInput) (req *request.Request, output *TerminateInstancesOutput) {
	op := &request.Operation{
		Name:       opTerminateInstances,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &TerminateInstancesInput{}
	}

	output = &TerminateInstancesOutput{}
	req = c.newRequest(op, input, output)
	return
}

// TerminateInstances API operation for Cloud Virtual Machine.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Cloud Virtual Machine's
// API operation TerminateInstances for usage and error information.
func (c *CVM) TerminateInstances(input *TerminateInstancesInput) (*TerminateInstancesOutput, error) {
	req, out := c.TerminateInstancesRequest(input)
	return out, req.Send()
}

// TerminateInstancesWithContext is the same as TerminateInstances with the addition of
// the ability to pass a context and additional request options.
//
// See TerminateInstances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CVM) TerminateInstancesWithContext(ctx sdf.Context, input *TerminateInstancesInput, opts ...request.Option) (*TerminateInstancesOutput, error) {
	req, out := c.TerminateInstancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataDisk struct {
	_ struct{} `type:"structure"`

	DiskId *string `locationName:"DiskId" type:"string"`

	DiskSize *int64 `locationName:"DiskId" type:"integer"`

	DiskType *string `locationName:"DiskType" type:"string"`
}

// String returns the string representation
func (s DataDisk) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DataDisk) GoString() string {
	return s.String()
}

// SetDiskId sets the DiskId field's value.
func (s *DataDisk) SetDiskId(v string) *DataDisk {
	s.DiskId = &v
	return s
}

// SetDiskSize sets the DiskSize field's value.
func (s *DataDisk) SetDiskSize(v int64) *DataDisk {
	s.DiskSize = &v
	return s
}

// SetDiskType sets the DiskType field's value.
func (s *DataDisk) SetDiskType(v string) *DataDisk {
	s.DiskType = &v
	return s
}

type DescribeImagesInput struct {
	_ struct{} `type:"structure"`

	Filters []*Filter `locationName:"Filters" locationNameList:"Filter" type:"list" flattened:"true"`

	ImageIds []*string `locationName:"ImageIds" locationNameList:"ImageId" type:"list" flattened:"true"`

	Limit *int64 `type:"integer"`

	Offset *int64 `type:"integer"`

	Region *string `type:"string" enum:"RegionEnum"`
}

// String returns the string representation
func (s DescribeImagesInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeImagesInput) GoString() string {
	return s.String()
}

// SetFilters sets the Filters field's value.
func (s *DescribeImagesInput) SetFilters(v []*Filter) *DescribeImagesInput {
	s.Filters = v
	return s
}

// SetImageIds sets the ImageIds field's value.
func (s *DescribeImagesInput) SetImageIds(v []*string) *DescribeImagesInput {
	s.ImageIds = v
	return s
}

// SetLimit sets the Limit field's value.
func (s *DescribeImagesInput) SetLimit(v int64) *DescribeImagesInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *DescribeImagesInput) SetOffset(v int64) *DescribeImagesInput {
	s.Offset = &v
	return s
}

// SetRegion sets the Region field's value.
func (s *DescribeImagesInput) SetRegion(v string) *DescribeImagesInput {
	s.Region = &v
	return s
}

type DescribeImagesOutput struct {
	_ struct{} `type:"structure"`

	Response *ImageResponse `type:"structure"`
}

// String returns the string representation
func (s DescribeImagesOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeImagesOutput) GoString() string {
	return s.String()
}

// SetResponse sets the Response field's value.
func (s *DescribeImagesOutput) SetResponse(v *ImageResponse) *DescribeImagesOutput {
	s.Response = v
	return s
}

// test
type DescribeInstancesInput struct {
	_ struct{} `type:"structure"`

	Filters []*Filter `locationName:"Filters" locationNameList:"Filter" type:"list" flattened:"true"`

	InstanceIds []*string `locationName:"InstanceIds" type:"list" flattened:"true"`

	// test
	Limit *int64 `type:"integer"`

	// test
	Offset *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeInstancesInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstancesInput) GoString() string {
	return s.String()
}

// SetFilters sets the Filters field's value.
func (s *DescribeInstancesInput) SetFilters(v []*Filter) *DescribeInstancesInput {
	s.Filters = v
	return s
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *DescribeInstancesInput) SetInstanceIds(v []*string) *DescribeInstancesInput {
	s.InstanceIds = v
	return s
}

// SetLimit sets the Limit field's value.
func (s *DescribeInstancesInput) SetLimit(v int64) *DescribeInstancesInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *DescribeInstancesInput) SetOffset(v int64) *DescribeInstancesInput {
	s.Offset = &v
	return s
}

// test
type DescribeInstancesOutput struct {
	_ struct{} `type:"structure"`

	// test
	Response *Response `type:"structure"`
}

// String returns the string representation
func (s DescribeInstancesOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstancesOutput) GoString() string {
	return s.String()
}

// SetResponse sets the Response field's value.
func (s *DescribeInstancesOutput) SetResponse(v *Response) *DescribeInstancesOutput {
	s.Response = v
	return s
}

type DescribeInstancesStatusInput struct {
	_ struct{} `type:"structure"`

	InstanceIds []*string `locationName:"InstanceIds" type:"list" flattened:"true"`

	Limit *int64 `type:"integer"`

	Offset *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeInstancesStatusInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstancesStatusInput) GoString() string {
	return s.String()
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *DescribeInstancesStatusInput) SetInstanceIds(v []*string) *DescribeInstancesStatusInput {
	s.InstanceIds = v
	return s
}

// SetLimit sets the Limit field's value.
func (s *DescribeInstancesStatusInput) SetLimit(v int64) *DescribeInstancesStatusInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *DescribeInstancesStatusInput) SetOffset(v int64) *DescribeInstancesStatusInput {
	s.Offset = &v
	return s
}

type DescribeInstancesStatusOutput struct {
	_ struct{} `type:"structure"`

	Response *StatusResponse `type:"structure"`
}

// String returns the string representation
func (s DescribeInstancesStatusOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstancesStatusOutput) GoString() string {
	return s.String()
}

// SetResponse sets the Response field's value.
func (s *DescribeInstancesStatusOutput) SetResponse(v *StatusResponse) *DescribeInstancesStatusOutput {
	s.Response = v
	return s
}

type EnhancedService struct {
	_ struct{} `type:"structure"`

	MonitorService *RunMonitorServiceEnabled `locationName:"SecurityService" type:"structure"`

	SecurityService *RunSecurityServiceEnabled `locationName:"SecurityService" type:"structure"`
}

// String returns the string representation
func (s EnhancedService) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s EnhancedService) GoString() string {
	return s.String()
}

// SetMonitorService sets the MonitorService field's value.
func (s *EnhancedService) SetMonitorService(v *RunMonitorServiceEnabled) *EnhancedService {
	s.MonitorService = v
	return s
}

// SetSecurityService sets the SecurityService field's value.
func (s *EnhancedService) SetSecurityService(v *RunSecurityServiceEnabled) *EnhancedService {
	s.SecurityService = v
	return s
}

type Filter struct {
	_ struct{} `type:"structure"`

	Name *string `type:"string"`

	Values []*string `type:"list" flattened:"true"`
}

// String returns the string representation
func (s Filter) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s Filter) GoString() string {
	return s.String()
}

// SetName sets the Name field's value.
func (s *Filter) SetName(v string) *Filter {
	s.Name = &v
	return s
}

// SetValues sets the Values field's value.
func (s *Filter) SetValues(v []*string) *Filter {
	s.Values = v
	return s
}

type Image struct {
	_ struct{} `type:"structure"`

	Creator *string `locationName:"Creator" type:"string"`

	ImageCreateTime *string `locationName:"ImageCreateTime" type:"string"`

	ImageDescription *string `locationName:"ImageDescription" type:"string"`

	ImageID *string `locationName:"ImageId" type:"string"`

	ImageName *string `locationName:"ImageName" type:"string"`

	ImageOsName *string `locationName:"ImageOsName" type:"string"`

	ImageStatus *string `locationName:"ImageStatus" type:"string"`

	ImageType *string `locationName:"ImageType" type:"string"`
}

// String returns the string representation
func (s Image) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s Image) GoString() string {
	return s.String()
}

// SetCreator sets the Creator field's value.
func (s *Image) SetCreator(v string) *Image {
	s.Creator = &v
	return s
}

// SetImageCreateTime sets the ImageCreateTime field's value.
func (s *Image) SetImageCreateTime(v string) *Image {
	s.ImageCreateTime = &v
	return s
}

// SetImageDescription sets the ImageDescription field's value.
func (s *Image) SetImageDescription(v string) *Image {
	s.ImageDescription = &v
	return s
}

// SetImageID sets the ImageID field's value.
func (s *Image) SetImageID(v string) *Image {
	s.ImageID = &v
	return s
}

// SetImageName sets the ImageName field's value.
func (s *Image) SetImageName(v string) *Image {
	s.ImageName = &v
	return s
}

// SetImageOsName sets the ImageOsName field's value.
func (s *Image) SetImageOsName(v string) *Image {
	s.ImageOsName = &v
	return s
}

// SetImageStatus sets the ImageStatus field's value.
func (s *Image) SetImageStatus(v string) *Image {
	s.ImageStatus = &v
	return s
}

// SetImageType sets the ImageType field's value.
func (s *Image) SetImageType(v string) *Image {
	s.ImageType = &v
	return s
}

type ImageResponse struct {
	_ struct{} `type:"structure"`

	ImageSet []*Image `locationName:"ImageSet" type:"list"`

	RequestID *string `locationName:"RequestId" type:"string"`

	TotalCount *int64 `locationName:"TotalCount" type:"integer"`
}

// String returns the string representation
func (s ImageResponse) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s ImageResponse) GoString() string {
	return s.String()
}

// SetImageSet sets the ImageSet field's value.
func (s *ImageResponse) SetImageSet(v []*Image) *ImageResponse {
	s.ImageSet = v
	return s
}

// SetRequestID sets the RequestID field's value.
func (s *ImageResponse) SetRequestID(v string) *ImageResponse {
	s.RequestID = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *ImageResponse) SetTotalCount(v int64) *ImageResponse {
	s.TotalCount = &v
	return s
}

// item
type Instance struct {
	_ struct{} `type:"structure"`

	// test
	CPU *int64 `locationName:"CPU" type:"integer"`

	CreatedTime *string `locationName:"CreatedTime" type:"string"`

	DataDisks []*DataDisk `type:"list"`

	ExpiredTime *string `locationName:"ExpiredTime" type:"string"`

	ImageID *string `locationName:"ImageId" type:"string"`

	InstanceChargeType *string `locationName:"InstanceChargeType" type:"string"`

	InstanceID *string `locationName:"InstanceId" type:"string"`

	InstanceName *string `locationName:"InstanceName" type:"string"`

	InstanceState *string `locationName:"InstanceState" type:"string"`

	// test
	InstanceType *string `locationName:"InstanceType" type:"string"`

	InternetAccessible *InternetAccessible `type:"structure"`

	LoginSettings *LoginSettings `type:"structure"`

	// test
	Memory *int64 `locationName:"Memory" type:"integer"`

	OsName *string `locationName:"OsName" type:"string"`

	Placement *Placement `type:"structure"`

	// test
	PrivateIpAddresses []*string `locationName:"PrivateIpAddresses" type:"list"`

	// test
	PublicIpAddresses []*string `locationName:"PublicIpAddresses" type:"list"`

	RenewFlag *string `locationName:"RenewFlag" type:"string"`

	RestrictState *string `locationName:"RestrictState" type:"string"`

	SecurityGroupIds []*string `locationName:"SecurityGroupIds" type:"list"`

	SystemDisk *SystemDisk `type:"structure"`

	VirtualPrivateCloud *VirtualPrivateCloud `type:"structure"`
}

// String returns the string representation
func (s Instance) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s Instance) GoString() string {
	return s.String()
}

// SetCPU sets the CPU field's value.
func (s *Instance) SetCPU(v int64) *Instance {
	s.CPU = &v
	return s
}

// SetCreatedTime sets the CreatedTime field's value.
func (s *Instance) SetCreatedTime(v string) *Instance {
	s.CreatedTime = &v
	return s
}

// SetDataDisks sets the DataDisks field's value.
func (s *Instance) SetDataDisks(v []*DataDisk) *Instance {
	s.DataDisks = v
	return s
}

// SetExpiredTime sets the ExpiredTime field's value.
func (s *Instance) SetExpiredTime(v string) *Instance {
	s.ExpiredTime = &v
	return s
}

// SetImageID sets the ImageID field's value.
func (s *Instance) SetImageID(v string) *Instance {
	s.ImageID = &v
	return s
}

// SetInstanceChargeType sets the InstanceChargeType field's value.
func (s *Instance) SetInstanceChargeType(v string) *Instance {
	s.InstanceChargeType = &v
	return s
}

// SetInstanceID sets the InstanceID field's value.
func (s *Instance) SetInstanceID(v string) *Instance {
	s.InstanceID = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *Instance) SetInstanceName(v string) *Instance {
	s.InstanceName = &v
	return s
}

// SetInstanceState sets the InstanceState field's value.
func (s *Instance) SetInstanceState(v string) *Instance {
	s.InstanceState = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *Instance) SetInstanceType(v string) *Instance {
	s.InstanceType = &v
	return s
}

// SetInternetAccessible sets the InternetAccessible field's value.
func (s *Instance) SetInternetAccessible(v *InternetAccessible) *Instance {
	s.InternetAccessible = v
	return s
}

// SetLoginSettings sets the LoginSettings field's value.
func (s *Instance) SetLoginSettings(v *LoginSettings) *Instance {
	s.LoginSettings = v
	return s
}

// SetMemory sets the Memory field's value.
func (s *Instance) SetMemory(v int64) *Instance {
	s.Memory = &v
	return s
}

// SetOsName sets the OsName field's value.
func (s *Instance) SetOsName(v string) *Instance {
	s.OsName = &v
	return s
}

// SetPlacement sets the Placement field's value.
func (s *Instance) SetPlacement(v *Placement) *Instance {
	s.Placement = v
	return s
}

// SetPrivateIpAddresses sets the PrivateIpAddresses field's value.
func (s *Instance) SetPrivateIpAddresses(v []*string) *Instance {
	s.PrivateIpAddresses = v
	return s
}

// SetPublicIpAddresses sets the PublicIpAddresses field's value.
func (s *Instance) SetPublicIpAddresses(v []*string) *Instance {
	s.PublicIpAddresses = v
	return s
}

// SetRenewFlag sets the RenewFlag field's value.
func (s *Instance) SetRenewFlag(v string) *Instance {
	s.RenewFlag = &v
	return s
}

// SetRestrictState sets the RestrictState field's value.
func (s *Instance) SetRestrictState(v string) *Instance {
	s.RestrictState = &v
	return s
}

// SetSecurityGroupIds sets the SecurityGroupIds field's value.
func (s *Instance) SetSecurityGroupIds(v []*string) *Instance {
	s.SecurityGroupIds = v
	return s
}

// SetSystemDisk sets the SystemDisk field's value.
func (s *Instance) SetSystemDisk(v *SystemDisk) *Instance {
	s.SystemDisk = v
	return s
}

// SetVirtualPrivateCloud sets the VirtualPrivateCloud field's value.
func (s *Instance) SetVirtualPrivateCloud(v *VirtualPrivateCloud) *Instance {
	s.VirtualPrivateCloud = v
	return s
}

type InstanceChargePrepaid struct {
	_ struct{} `type:"structure"`

	Period *int64 `locationName:"Period" type:"integer"`

	RenewFlag *string `locationName:"RenewFlag" type:"string"`
}

// String returns the string representation
func (s InstanceChargePrepaid) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s InstanceChargePrepaid) GoString() string {
	return s.String()
}

// SetPeriod sets the Period field's value.
func (s *InstanceChargePrepaid) SetPeriod(v int64) *InstanceChargePrepaid {
	s.Period = &v
	return s
}

// SetRenewFlag sets the RenewFlag field's value.
func (s *InstanceChargePrepaid) SetRenewFlag(v string) *InstanceChargePrepaid {
	s.RenewFlag = &v
	return s
}

type InstanceStatus struct {
	_ struct{} `type:"structure"`

	InstanceID *string `locationName:"InstanceId" type:"string"`

	InstanceState *string `locationName:"InstanceState" type:"string"`
}

// String returns the string representation
func (s InstanceStatus) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s InstanceStatus) GoString() string {
	return s.String()
}

// SetInstanceID sets the InstanceID field's value.
func (s *InstanceStatus) SetInstanceID(v string) *InstanceStatus {
	s.InstanceID = &v
	return s
}

// SetInstanceState sets the InstanceState field's value.
func (s *InstanceStatus) SetInstanceState(v string) *InstanceStatus {
	s.InstanceState = &v
	return s
}

type InternetAccessible struct {
	_ struct{} `type:"structure"`

	InternetChargeType *string `locationName:"InternetChargeType" type:"string"`

	InternetMaxBandwidthOut *int64 `locationName:"InternetMaxBandwidthOut" type:"integer"`

	PublicIpAssigned *bool `locationName:"PublicIpAssigned" type:"boolean"`
}

// String returns the string representation
func (s InternetAccessible) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s InternetAccessible) GoString() string {
	return s.String()
}

// SetInternetChargeType sets the InternetChargeType field's value.
func (s *InternetAccessible) SetInternetChargeType(v string) *InternetAccessible {
	s.InternetChargeType = &v
	return s
}

// SetInternetMaxBandwidthOut sets the InternetMaxBandwidthOut field's value.
func (s *InternetAccessible) SetInternetMaxBandwidthOut(v int64) *InternetAccessible {
	s.InternetMaxBandwidthOut = &v
	return s
}

// SetPublicIpAssigned sets the PublicIpAssigned field's value.
func (s *InternetAccessible) SetPublicIpAssigned(v bool) *InternetAccessible {
	s.PublicIpAssigned = &v
	return s
}

type LoginSettings struct {
	_ struct{} `type:"structure"`

	KeepImageLogin *bool `locationName:"KeepImageLogin" type:"boolean"`

	KeyIds []*string `locationName:"KeyIds" type:"list" flattened:"true"`

	Password *string `locationName:"Password" type:"string"`
}

// String returns the string representation
func (s LoginSettings) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s LoginSettings) GoString() string {
	return s.String()
}

// SetKeepImageLogin sets the KeepImageLogin field's value.
func (s *LoginSettings) SetKeepImageLogin(v bool) *LoginSettings {
	s.KeepImageLogin = &v
	return s
}

// SetKeyIds sets the KeyIds field's value.
func (s *LoginSettings) SetKeyIds(v []*string) *LoginSettings {
	s.KeyIds = v
	return s
}

// SetPassword sets the Password field's value.
func (s *LoginSettings) SetPassword(v string) *LoginSettings {
	s.Password = &v
	return s
}

type OperateInstancesResponse struct {
	_ struct{} `type:"structure"`

	RequestID *string `locationName:"RequestId" type:"string"`
}

// String returns the string representation
func (s OperateInstancesResponse) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s OperateInstancesResponse) GoString() string {
	return s.String()
}

// SetRequestID sets the RequestID field's value.
func (s *OperateInstancesResponse) SetRequestID(v string) *OperateInstancesResponse {
	s.RequestID = &v
	return s
}

type Placement struct {
	_ struct{} `type:"structure"`

	HostIds []*string `locationName:"HostIds" type:"list"`

	ProjectId *int64 `locationName:"ProjectId" type:"integer"`

	Zone *string `locationName:"Zone" type:"string"`
}

// String returns the string representation
func (s Placement) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s Placement) GoString() string {
	return s.String()
}

// SetHostIds sets the HostIds field's value.
func (s *Placement) SetHostIds(v []*string) *Placement {
	s.HostIds = v
	return s
}

// SetProjectId sets the ProjectId field's value.
func (s *Placement) SetProjectId(v int64) *Placement {
	s.ProjectId = &v
	return s
}

// SetZone sets the Zone field's value.
func (s *Placement) SetZone(v string) *Placement {
	s.Zone = &v
	return s
}

type RebootInstancesInput struct {
	_ struct{} `type:"structure"`

	ForceReboot *bool `type:"boolean"`

	InstanceIds []*string `locationName:"InstanceIds" type:"list" flattened:"true"`
}

// String returns the string representation
func (s RebootInstancesInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s RebootInstancesInput) GoString() string {
	return s.String()
}

// SetForceReboot sets the ForceReboot field's value.
func (s *RebootInstancesInput) SetForceReboot(v bool) *RebootInstancesInput {
	s.ForceReboot = &v
	return s
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *RebootInstancesInput) SetInstanceIds(v []*string) *RebootInstancesInput {
	s.InstanceIds = v
	return s
}

type RebootInstancesOutput struct {
	_ struct{} `type:"structure"`

	Response *OperateInstancesResponse `type:"structure"`
}

// String returns the string representation
func (s RebootInstancesOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s RebootInstancesOutput) GoString() string {
	return s.String()
}

// SetResponse sets the Response field's value.
func (s *RebootInstancesOutput) SetResponse(v *OperateInstancesResponse) *RebootInstancesOutput {
	s.Response = v
	return s
}

// Response item
type Response struct {
	_ struct{} `type:"structure"`

	// test
	InstanceSet []*Instance `locationName:"InstanceSet" type:"list"`

	RequestID *string `locationName:"RequestId" type:"string"`

	TotalCount *int64 `locationName:"TotalCount" type:"integer"`
}

// String returns the string representation
func (s Response) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s Response) GoString() string {
	return s.String()
}

// SetInstanceSet sets the InstanceSet field's value.
func (s *Response) SetInstanceSet(v []*Instance) *Response {
	s.InstanceSet = v
	return s
}

// SetRequestID sets the RequestID field's value.
func (s *Response) SetRequestID(v string) *Response {
	s.RequestID = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *Response) SetTotalCount(v int64) *Response {
	s.TotalCount = &v
	return s
}

type RunInstancesInput struct {
	_ struct{} `type:"structure"`

	ClientToken *string `locationName:"ClientToken" type:"string"`

	DataDisks []*DataDisk `locationName:"DataDisks" type:"list"`

	EnhancedService *EnhancedService `type:"structure"`

	HostName *string `type:"string"`

	ImageId *string `type:"string"`

	InstanceChargePrepaid *InstanceChargePrepaid `locationName:"InstanceChargePrepaid" type:"structure"`

	InstanceChargeType *string `locationName:"InstanceChargeType" type:"string"`

	InstanceCount *int64 `locationName:"InstanceCount" type:"integer"`

	InstanceName *string `locationName:"InstanceName" type:"string"`

	InstanceType *string `locationName:"InstanceType" type:"string"`

	InternetAccessible *InternetAccessible `locationName:"InternetAccessible" type:"structure"`

	LoginSettings *LoginSettings `locationName:"LoginSettings" type:"structure"`

	Placement *Placement `locationName:"Placement" type:"structure"`

	SecurityGroupIds []*string `locationName:"SecurityGroupIds" type:"list" flattened:"true"`

	SystemDisk *SystemDisk `locationName:"SystemDisk" type:"structure"`

	TagSpecification []*TagSpecification `type:"list"`

	UserData *string `type:"string"`

	VirtualPrivateCloud *VirtualPrivateCloud `locationName:"VirtualPrivateCloud" type:"structure"`
}

// String returns the string representation
func (s RunInstancesInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s RunInstancesInput) GoString() string {
	return s.String()
}

// SetClientToken sets the ClientToken field's value.
func (s *RunInstancesInput) SetClientToken(v string) *RunInstancesInput {
	s.ClientToken = &v
	return s
}

// SetDataDisks sets the DataDisks field's value.
func (s *RunInstancesInput) SetDataDisks(v []*DataDisk) *RunInstancesInput {
	s.DataDisks = v
	return s
}

// SetEnhancedService sets the EnhancedService field's value.
func (s *RunInstancesInput) SetEnhancedService(v *EnhancedService) *RunInstancesInput {
	s.EnhancedService = v
	return s
}

// SetHostName sets the HostName field's value.
func (s *RunInstancesInput) SetHostName(v string) *RunInstancesInput {
	s.HostName = &v
	return s
}

// SetImageId sets the ImageId field's value.
func (s *RunInstancesInput) SetImageId(v string) *RunInstancesInput {
	s.ImageId = &v
	return s
}

// SetInstanceChargePrepaid sets the InstanceChargePrepaid field's value.
func (s *RunInstancesInput) SetInstanceChargePrepaid(v *InstanceChargePrepaid) *RunInstancesInput {
	s.InstanceChargePrepaid = v
	return s
}

// SetInstanceChargeType sets the InstanceChargeType field's value.
func (s *RunInstancesInput) SetInstanceChargeType(v string) *RunInstancesInput {
	s.InstanceChargeType = &v
	return s
}

// SetInstanceCount sets the InstanceCount field's value.
func (s *RunInstancesInput) SetInstanceCount(v int64) *RunInstancesInput {
	s.InstanceCount = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *RunInstancesInput) SetInstanceName(v string) *RunInstancesInput {
	s.InstanceName = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *RunInstancesInput) SetInstanceType(v string) *RunInstancesInput {
	s.InstanceType = &v
	return s
}

// SetInternetAccessible sets the InternetAccessible field's value.
func (s *RunInstancesInput) SetInternetAccessible(v *InternetAccessible) *RunInstancesInput {
	s.InternetAccessible = v
	return s
}

// SetLoginSettings sets the LoginSettings field's value.
func (s *RunInstancesInput) SetLoginSettings(v *LoginSettings) *RunInstancesInput {
	s.LoginSettings = v
	return s
}

// SetPlacement sets the Placement field's value.
func (s *RunInstancesInput) SetPlacement(v *Placement) *RunInstancesInput {
	s.Placement = v
	return s
}

// SetSecurityGroupIds sets the SecurityGroupIds field's value.
func (s *RunInstancesInput) SetSecurityGroupIds(v []*string) *RunInstancesInput {
	s.SecurityGroupIds = v
	return s
}

// SetSystemDisk sets the SystemDisk field's value.
func (s *RunInstancesInput) SetSystemDisk(v *SystemDisk) *RunInstancesInput {
	s.SystemDisk = v
	return s
}

// SetTagSpecification sets the TagSpecification field's value.
func (s *RunInstancesInput) SetTagSpecification(v []*TagSpecification) *RunInstancesInput {
	s.TagSpecification = v
	return s
}

// SetUserData sets the UserData field's value.
func (s *RunInstancesInput) SetUserData(v string) *RunInstancesInput {
	s.UserData = &v
	return s
}

// SetVirtualPrivateCloud sets the VirtualPrivateCloud field's value.
func (s *RunInstancesInput) SetVirtualPrivateCloud(v *VirtualPrivateCloud) *RunInstancesInput {
	s.VirtualPrivateCloud = v
	return s
}

type RunInstancesOutput struct {
	_ struct{} `type:"structure"`

	Response *RunInstancesResponse `type:"structure"`
}

// String returns the string representation
func (s RunInstancesOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s RunInstancesOutput) GoString() string {
	return s.String()
}

// SetResponse sets the Response field's value.
func (s *RunInstancesOutput) SetResponse(v *RunInstancesResponse) *RunInstancesOutput {
	s.Response = v
	return s
}

type RunInstancesResponse struct {
	_ struct{} `type:"structure"`

	InstanceIdSet []*string `type:"list"`

	RequestId *string `locationName:"InstanceIds" type:"string"`
}

// String returns the string representation
func (s RunInstancesResponse) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s RunInstancesResponse) GoString() string {
	return s.String()
}

// SetInstanceIdSet sets the InstanceIdSet field's value.
func (s *RunInstancesResponse) SetInstanceIdSet(v []*string) *RunInstancesResponse {
	s.InstanceIdSet = v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *RunInstancesResponse) SetRequestId(v string) *RunInstancesResponse {
	s.RequestId = &v
	return s
}

type RunMonitorServiceEnabled struct {
	_ struct{} `type:"structure"`

	Enabled *bool `locationName:"Enabled" type:"boolean"`
}

// String returns the string representation
func (s RunMonitorServiceEnabled) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s RunMonitorServiceEnabled) GoString() string {
	return s.String()
}

// SetEnabled sets the Enabled field's value.
func (s *RunMonitorServiceEnabled) SetEnabled(v bool) *RunMonitorServiceEnabled {
	s.Enabled = &v
	return s
}

type RunSecurityServiceEnabled struct {
	_ struct{} `type:"structure"`

	Enabled *bool `locationName:"Enabled" type:"boolean"`
}

// String returns the string representation
func (s RunSecurityServiceEnabled) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s RunSecurityServiceEnabled) GoString() string {
	return s.String()
}

// SetEnabled sets the Enabled field's value.
func (s *RunSecurityServiceEnabled) SetEnabled(v bool) *RunSecurityServiceEnabled {
	s.Enabled = &v
	return s
}

type StartInstancesInput struct {
	_ struct{} `type:"structure"`

	InstanceIds []*string `locationName:"InstanceIds" type:"list" flattened:"true"`
}

// String returns the string representation
func (s StartInstancesInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s StartInstancesInput) GoString() string {
	return s.String()
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *StartInstancesInput) SetInstanceIds(v []*string) *StartInstancesInput {
	s.InstanceIds = v
	return s
}

type StartInstancesOutput struct {
	_ struct{} `type:"structure"`

	Response *OperateInstancesResponse `type:"structure"`
}

// String returns the string representation
func (s StartInstancesOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s StartInstancesOutput) GoString() string {
	return s.String()
}

// SetResponse sets the Response field's value.
func (s *StartInstancesOutput) SetResponse(v *OperateInstancesResponse) *StartInstancesOutput {
	s.Response = v
	return s
}

type StatusResponse struct {
	_ struct{} `type:"structure"`

	InstanceStatusSet []*InstanceStatus `locationName:"InstanceStatusSet" type:"list"`

	RequestID *string `locationName:"RequestId" type:"string"`

	TotalCount *int64 `locationName:"TotalCount" type:"integer"`
}

// String returns the string representation
func (s StatusResponse) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s StatusResponse) GoString() string {
	return s.String()
}

// SetInstanceStatusSet sets the InstanceStatusSet field's value.
func (s *StatusResponse) SetInstanceStatusSet(v []*InstanceStatus) *StatusResponse {
	s.InstanceStatusSet = v
	return s
}

// SetRequestID sets the RequestID field's value.
func (s *StatusResponse) SetRequestID(v string) *StatusResponse {
	s.RequestID = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *StatusResponse) SetTotalCount(v int64) *StatusResponse {
	s.TotalCount = &v
	return s
}

type StopInstancesInput struct {
	_ struct{} `type:"structure"`

	ForceStop *bool `locationName:"ForceStop" type:"boolean"`

	InstanceIds []*string `locationName:"InstanceIds" type:"list" flattened:"true"`

	StopType *string `type:"string"`

	StoppedMode *string `type:"string"`
}

// String returns the string representation
func (s StopInstancesInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s StopInstancesInput) GoString() string {
	return s.String()
}

// SetForceStop sets the ForceStop field's value.
func (s *StopInstancesInput) SetForceStop(v bool) *StopInstancesInput {
	s.ForceStop = &v
	return s
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *StopInstancesInput) SetInstanceIds(v []*string) *StopInstancesInput {
	s.InstanceIds = v
	return s
}

// SetStopType sets the StopType field's value.
func (s *StopInstancesInput) SetStopType(v string) *StopInstancesInput {
	s.StopType = &v
	return s
}

// SetStoppedMode sets the StoppedMode field's value.
func (s *StopInstancesInput) SetStoppedMode(v string) *StopInstancesInput {
	s.StoppedMode = &v
	return s
}

type StopInstancesOutput struct {
	_ struct{} `type:"structure"`

	Response *OperateInstancesResponse `type:"structure"`
}

// String returns the string representation
func (s StopInstancesOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s StopInstancesOutput) GoString() string {
	return s.String()
}

// SetResponse sets the Response field's value.
func (s *StopInstancesOutput) SetResponse(v *OperateInstancesResponse) *StopInstancesOutput {
	s.Response = v
	return s
}

type SystemDisk struct {
	_ struct{} `type:"structure"`

	DiskId *string `locationName:"DiskId" type:"string"`

	DiskSize *int64 `locationName:"DiskSize" type:"integer"`

	DiskType *string `locationName:"DiskType" type:"string"`
}

// String returns the string representation
func (s SystemDisk) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s SystemDisk) GoString() string {
	return s.String()
}

// SetDiskId sets the DiskId field's value.
func (s *SystemDisk) SetDiskId(v string) *SystemDisk {
	s.DiskId = &v
	return s
}

// SetDiskSize sets the DiskSize field's value.
func (s *SystemDisk) SetDiskSize(v int64) *SystemDisk {
	s.DiskSize = &v
	return s
}

// SetDiskType sets the DiskType field's value.
func (s *SystemDisk) SetDiskType(v string) *SystemDisk {
	s.DiskType = &v
	return s
}

type Tag struct {
	_ struct{} `type:"structure"`

	Key *string `type:"string"`

	Value *string `type:"string"`
}

// String returns the string representation
func (s Tag) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s Tag) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *Tag) SetKey(v string) *Tag {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *Tag) SetValue(v string) *Tag {
	s.Value = &v
	return s
}

type TagSpecification struct {
	_ struct{} `type:"structure"`

	ResourceType *string `type:"string"`

	Tags []*Tag `type:"list"`
}

// String returns the string representation
func (s TagSpecification) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s TagSpecification) GoString() string {
	return s.String()
}

// SetResourceType sets the ResourceType field's value.
func (s *TagSpecification) SetResourceType(v string) *TagSpecification {
	s.ResourceType = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *TagSpecification) SetTags(v []*Tag) *TagSpecification {
	s.Tags = v
	return s
}

type TerminateInstancesInput struct {
	_ struct{} `type:"structure"`

	InstanceIds []*string `locationName:"InstanceIds" type:"list" flattened:"true"`
}

// String returns the string representation
func (s TerminateInstancesInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s TerminateInstancesInput) GoString() string {
	return s.String()
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *TerminateInstancesInput) SetInstanceIds(v []*string) *TerminateInstancesInput {
	s.InstanceIds = v
	return s
}

type TerminateInstancesOutput struct {
	_ struct{} `type:"structure"`

	Response *OperateInstancesResponse `type:"structure"`
}

// String returns the string representation
func (s TerminateInstancesOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s TerminateInstancesOutput) GoString() string {
	return s.String()
}

// SetResponse sets the Response field's value.
func (s *TerminateInstancesOutput) SetResponse(v *OperateInstancesResponse) *TerminateInstancesOutput {
	s.Response = v
	return s
}

type VirtualPrivateCloud struct {
	_ struct{} `type:"structure"`

	AsVpcGateway *bool `locationName:"AsVpcGateway" type:"boolean"`

	PrivateIpAddresses []*string `locationName:"PrivateIpAddresses" type:"list"`

	SubnetId *string `locationName:"SubnetId" type:"string"`

	VpcId *string `locationName:"VpcId" type:"string"`
}

// String returns the string representation
func (s VirtualPrivateCloud) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s VirtualPrivateCloud) GoString() string {
	return s.String()
}

// SetAsVpcGateway sets the AsVpcGateway field's value.
func (s *VirtualPrivateCloud) SetAsVpcGateway(v bool) *VirtualPrivateCloud {
	s.AsVpcGateway = &v
	return s
}

// SetPrivateIpAddresses sets the PrivateIpAddresses field's value.
func (s *VirtualPrivateCloud) SetPrivateIpAddresses(v []*string) *VirtualPrivateCloud {
	s.PrivateIpAddresses = v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *VirtualPrivateCloud) SetSubnetId(v string) *VirtualPrivateCloud {
	s.SubnetId = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *VirtualPrivateCloud) SetVpcId(v string) *VirtualPrivateCloud {
	s.VpcId = &v
	return s
}

const (
	// RegionEnumApBeijing is a RegionEnum enum value
	RegionEnumApBeijing = "ap-beijing"

	// RegionEnumApChengdu is a RegionEnum enum value
	RegionEnumApChengdu = "ap-chengdu"

	// RegionEnumApGuangzhou is a RegionEnum enum value
	RegionEnumApGuangzhou = "ap-guangzhou"

	// RegionEnumApGuangzhouOpen is a RegionEnum enum value
	RegionEnumApGuangzhouOpen = "ap-guangzhou-open"

	// RegionEnumApHongkong is a RegionEnum enum value
	RegionEnumApHongkong = "ap-hongkong"

	// RegionEnumApShanghai is a RegionEnum enum value
	RegionEnumApShanghai = "ap-shanghai"

	// RegionEnumApSingapore is a RegionEnum enum value
	RegionEnumApSingapore = "ap-singapore"

	// RegionEnumEuFrankfurt is a RegionEnum enum value
	RegionEnumEuFrankfurt = "eu-frankfurt"

	// RegionEnumNaSiliconvalley is a RegionEnum enum value
	RegionEnumNaSiliconvalley = "na-siliconvalley"

	// RegionEnumNaToronto is a RegionEnum enum value
	RegionEnumNaToronto = "na-toronto"

	// RegionEnumApShanghaiFsi is a RegionEnum enum value
	RegionEnumApShanghaiFsi = "ap-shanghai-fsi"

	// RegionEnumApShenzhenFsi is a RegionEnum enum value
	RegionEnumApShenzhenFsi = "ap-shenzhen-fsi"
)
