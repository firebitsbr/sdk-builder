// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cbs

import (
	"github.com/polefishu/sdk-builder/sdf"
	"github.com/polefishu/sdk-builder/sdf/request"
	"github.com/polefishu/sdk-builder/sdf/sdfutil"
)

const opDescribeCbsStorages = "DescribeCbsStorages"

// DescribeCbsStoragesRequest generates a "aws/request.Request" representing the
// client's request for the DescribeCbsStorages operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeCbsStorages for more information on using the DescribeCbsStorages
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeCbsStoragesRequest method.
//    req, resp := client.DescribeCbsStoragesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CBS) DescribeCbsStoragesRequest(input *DescribeCbsStoragesInput) (req *request.Request, output *DescribeCbsStoragesOutput) {
	op := &request.Operation{
		Name:       opDescribeCbsStorages,
		HTTPMethod: "GET",
		HTTPPath:   "/v2/index.php",
	}

	if input == nil {
		input = &DescribeCbsStoragesInput{}
	}

	output = &DescribeCbsStoragesOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DescribeCbsStorages API operation for Cloud Virtual Machine CBS.
//
// 本接口 (DescribeCbsStorages) 用于查询一个或多个实例的详细信息。
//
// 接口请求域名：cvm.api.qcloud.com
//
//    * 可以根据实例ID、实例名称或者实例计费模式等信息来查询实例的详细信息。过滤信息详细请见过滤器Filter。
//    * 如果参数为空，返回当前用户一定数量（Limit所指定的数量，默认为20）的实例。
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Cloud Virtual Machine CBS's
// API operation DescribeCbsStorages for usage and error information.
func (c *CBS) DescribeCbsStorages(input *DescribeCbsStoragesInput) (*DescribeCbsStoragesOutput, error) {
	req, out := c.DescribeCbsStoragesRequest(input)
	return out, req.Send()
}

// DescribeCbsStoragesWithContext is the same as DescribeCbsStorages with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCbsStorages for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CBS) DescribeCbsStoragesWithContext(ctx sdf.Context, input *DescribeCbsStoragesInput, opts ...request.Option) (*DescribeCbsStoragesOutput, error) {
	req, out := c.DescribeCbsStoragesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeCbsStoragesInput struct {
	_ struct{} `type:"structure"`

	DiskType *string `locationName:"diskType" type:"string"`

	Limit *int64 `locationName:"limit" type:"integer"`

	Offset *int64 `locationName:"offset" type:"integer"`

	PayMode *string `locationName:"payMode" type:"string"`

	Portable *int64 `locationName:"portable" type:"integer"`

	ProjectId *int64 `locationName:"projectId" type:"integer"`

	Region *string `type:"string" enum:"RegionEnum"`

	StorageIds []*string `locationName:"storageIds" type:"list" flattened:"true"`

	StorageStatus []*string `locationName:"storageStatus" type:"list" flattened:"true"`

	StorageType *string `locationName:"storageType" type:"string"`

	UInstanceIds []*string `locationName:"uInstanceIds" type:"list" flattened:"true"`

	ZoneId *string `locationName:"zoneId" type:"string"`
}

// String returns the string representation
func (s DescribeCbsStoragesInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCbsStoragesInput) GoString() string {
	return s.String()
}

// SetDiskType sets the DiskType field's value.
func (s *DescribeCbsStoragesInput) SetDiskType(v string) *DescribeCbsStoragesInput {
	s.DiskType = &v
	return s
}

// SetLimit sets the Limit field's value.
func (s *DescribeCbsStoragesInput) SetLimit(v int64) *DescribeCbsStoragesInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *DescribeCbsStoragesInput) SetOffset(v int64) *DescribeCbsStoragesInput {
	s.Offset = &v
	return s
}

// SetPayMode sets the PayMode field's value.
func (s *DescribeCbsStoragesInput) SetPayMode(v string) *DescribeCbsStoragesInput {
	s.PayMode = &v
	return s
}

// SetPortable sets the Portable field's value.
func (s *DescribeCbsStoragesInput) SetPortable(v int64) *DescribeCbsStoragesInput {
	s.Portable = &v
	return s
}

// SetProjectId sets the ProjectId field's value.
func (s *DescribeCbsStoragesInput) SetProjectId(v int64) *DescribeCbsStoragesInput {
	s.ProjectId = &v
	return s
}

// SetRegion sets the Region field's value.
func (s *DescribeCbsStoragesInput) SetRegion(v string) *DescribeCbsStoragesInput {
	s.Region = &v
	return s
}

// SetStorageIds sets the StorageIds field's value.
func (s *DescribeCbsStoragesInput) SetStorageIds(v []*string) *DescribeCbsStoragesInput {
	s.StorageIds = v
	return s
}

// SetStorageStatus sets the StorageStatus field's value.
func (s *DescribeCbsStoragesInput) SetStorageStatus(v []*string) *DescribeCbsStoragesInput {
	s.StorageStatus = v
	return s
}

// SetStorageType sets the StorageType field's value.
func (s *DescribeCbsStoragesInput) SetStorageType(v string) *DescribeCbsStoragesInput {
	s.StorageType = &v
	return s
}

// SetUInstanceIds sets the UInstanceIds field's value.
func (s *DescribeCbsStoragesInput) SetUInstanceIds(v []*string) *DescribeCbsStoragesInput {
	s.UInstanceIds = v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *DescribeCbsStoragesInput) SetZoneId(v string) *DescribeCbsStoragesInput {
	s.ZoneId = &v
	return s
}

type DescribeCbsStoragesOutput struct {
	_ struct{} `type:"structure"`

	Code *int64 `locationName:"code" type:"integer"`

	CodeDesc *string `locationName:"codeDesc" type:"string"`

	Message *string `locationName:"message" type:"string"`

	StorageSet []*Storage `locationName:"storageSet" type:"list"`

	TotalCount *int64 `locationName:"totalCount" type:"integer"`
}

// String returns the string representation
func (s DescribeCbsStoragesOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCbsStoragesOutput) GoString() string {
	return s.String()
}

// SetCode sets the Code field's value.
func (s *DescribeCbsStoragesOutput) SetCode(v int64) *DescribeCbsStoragesOutput {
	s.Code = &v
	return s
}

// SetCodeDesc sets the CodeDesc field's value.
func (s *DescribeCbsStoragesOutput) SetCodeDesc(v string) *DescribeCbsStoragesOutput {
	s.CodeDesc = &v
	return s
}

// SetMessage sets the Message field's value.
func (s *DescribeCbsStoragesOutput) SetMessage(v string) *DescribeCbsStoragesOutput {
	s.Message = &v
	return s
}

// SetStorageSet sets the StorageSet field's value.
func (s *DescribeCbsStoragesOutput) SetStorageSet(v []*Storage) *DescribeCbsStoragesOutput {
	s.StorageSet = v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeCbsStoragesOutput) SetTotalCount(v int64) *DescribeCbsStoragesOutput {
	s.TotalCount = &v
	return s
}

type Storage struct {
	_ struct{} `type:"structure"`

	Attached *int64 `locationName:"attached" type:"integer"`

	CreateTime *string `locationName:"createTime" type:"string"`

	DeadlineTime *string `locationName:"deadlineTime" type:"string"`

	DiskType *string `locationName:"diskType" type:"string"`

	PayMode *string `locationName:"payMode" type:"string"`

	Portable *int64 `locationName:"portable" type:"integer"`

	ProjectId *int64 `locationName:"projectId" type:"integer"`

	SnapshotAbility *int64 `locationName:"snapshotAbility" type:"integer"`

	StorageId *string `locationName:"storageId" type:"string"`

	StorageName *string `locationName:"storageName" type:"string"`

	StorageSize *int64 `locationName:"storageSize" type:"integer"`

	StorageStatus *string `locationName:"storageStatus" type:"string"`

	StorageType *string `locationName:"storageType" type:"string"`

	UInstanceId *string `locationName:"uInstanceId" type:"string"`

	ZoneId *int64 `locationName:"zoneId" type:"integer"`
}

// String returns the string representation
func (s Storage) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s Storage) GoString() string {
	return s.String()
}

// SetAttached sets the Attached field's value.
func (s *Storage) SetAttached(v int64) *Storage {
	s.Attached = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *Storage) SetCreateTime(v string) *Storage {
	s.CreateTime = &v
	return s
}

// SetDeadlineTime sets the DeadlineTime field's value.
func (s *Storage) SetDeadlineTime(v string) *Storage {
	s.DeadlineTime = &v
	return s
}

// SetDiskType sets the DiskType field's value.
func (s *Storage) SetDiskType(v string) *Storage {
	s.DiskType = &v
	return s
}

// SetPayMode sets the PayMode field's value.
func (s *Storage) SetPayMode(v string) *Storage {
	s.PayMode = &v
	return s
}

// SetPortable sets the Portable field's value.
func (s *Storage) SetPortable(v int64) *Storage {
	s.Portable = &v
	return s
}

// SetProjectId sets the ProjectId field's value.
func (s *Storage) SetProjectId(v int64) *Storage {
	s.ProjectId = &v
	return s
}

// SetSnapshotAbility sets the SnapshotAbility field's value.
func (s *Storage) SetSnapshotAbility(v int64) *Storage {
	s.SnapshotAbility = &v
	return s
}

// SetStorageId sets the StorageId field's value.
func (s *Storage) SetStorageId(v string) *Storage {
	s.StorageId = &v
	return s
}

// SetStorageName sets the StorageName field's value.
func (s *Storage) SetStorageName(v string) *Storage {
	s.StorageName = &v
	return s
}

// SetStorageSize sets the StorageSize field's value.
func (s *Storage) SetStorageSize(v int64) *Storage {
	s.StorageSize = &v
	return s
}

// SetStorageStatus sets the StorageStatus field's value.
func (s *Storage) SetStorageStatus(v string) *Storage {
	s.StorageStatus = &v
	return s
}

// SetStorageType sets the StorageType field's value.
func (s *Storage) SetStorageType(v string) *Storage {
	s.StorageType = &v
	return s
}

// SetUInstanceId sets the UInstanceId field's value.
func (s *Storage) SetUInstanceId(v string) *Storage {
	s.UInstanceId = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *Storage) SetZoneId(v int64) *Storage {
	s.ZoneId = &v
	return s
}

const (
	// RegionEnumApBeijing is a RegionEnum enum value
	RegionEnumApBeijing = "ap-beijing"

	// RegionEnumApChengdu is a RegionEnum enum value
	RegionEnumApChengdu = "ap-chengdu"

	// RegionEnumApGuangzhou is a RegionEnum enum value
	RegionEnumApGuangzhou = "ap-guangzhou"

	// RegionEnumApGuangzhouOpen is a RegionEnum enum value
	RegionEnumApGuangzhouOpen = "ap-guangzhou-open"

	// RegionEnumApHongkong is a RegionEnum enum value
	RegionEnumApHongkong = "ap-hongkong"

	// RegionEnumApShanghai is a RegionEnum enum value
	RegionEnumApShanghai = "ap-shanghai"

	// RegionEnumApSingapore is a RegionEnum enum value
	RegionEnumApSingapore = "ap-singapore"

	// RegionEnumEuFrankfurt is a RegionEnum enum value
	RegionEnumEuFrankfurt = "eu-frankfurt"

	// RegionEnumNaSiliconvalley is a RegionEnum enum value
	RegionEnumNaSiliconvalley = "na-siliconvalley"

	// RegionEnumNaToronto is a RegionEnum enum value
	RegionEnumNaToronto = "na-toronto"

	// RegionEnumApShanghaiFsi is a RegionEnum enum value
	RegionEnumApShanghaiFsi = "ap-shanghai-fsi"

	// RegionEnumApShenzhenFsi is a RegionEnum enum value
	RegionEnumApShenzhenFsi = "ap-shenzhen-fsi"
)
