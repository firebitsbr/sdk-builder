// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package vpc

import (
	"github.com/polefishu/sdk-builder/sdf"
	"github.com/polefishu/sdk-builder/sdf/request"
	"github.com/polefishu/sdk-builder/sdf/sdfutil"
)

const opCreateSubnet = "CreateSubnet"

// CreateSubnetRequest generates a "aws/request.Request" representing the
// client's request for the CreateSubnet operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateSubnet for more information on using the CreateSubnet
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateSubnetRequest method.
//    req, resp := client.CreateSubnetRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) CreateSubnetRequest(input *CreateSubnetInput) (req *request.Request, output *CreateSubnetOutput) {
	op := &request.Operation{
		Name:       opCreateSubnet,
		HTTPMethod: "GET",
		HTTPPath:   "/v2/index.php",
	}

	if input == nil {
		input = &CreateSubnetInput{}
	}

	output = &CreateSubnetOutput{}
	req = c.newRequest(op, input, output)
	return
}

// CreateSubnet API operation for VirtualPrivateCloud.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for VirtualPrivateCloud's
// API operation CreateSubnet for usage and error information.
func (c *VPC) CreateSubnet(input *CreateSubnetInput) (*CreateSubnetOutput, error) {
	req, out := c.CreateSubnetRequest(input)
	return out, req.Send()
}

// CreateSubnetWithContext is the same as CreateSubnet with the addition of
// the ability to pass a context and additional request options.
//
// See CreateSubnet for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) CreateSubnetWithContext(ctx sdf.Context, input *CreateSubnetInput, opts ...request.Option) (*CreateSubnetOutput, error) {
	req, out := c.CreateSubnetRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateVpc = "CreateVpc"

// CreateVpcRequest generates a "aws/request.Request" representing the
// client's request for the CreateVpc operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateVpc for more information on using the CreateVpc
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateVpcRequest method.
//    req, resp := client.CreateVpcRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) CreateVpcRequest(input *CreateVpcInput) (req *request.Request, output *CreateVpcOutput) {
	op := &request.Operation{
		Name:       opCreateVpc,
		HTTPMethod: "GET",
		HTTPPath:   "/v2/index.php",
	}

	if input == nil {
		input = &CreateVpcInput{}
	}

	output = &CreateVpcOutput{}
	req = c.newRequest(op, input, output)
	return
}

// CreateVpc API operation for VirtualPrivateCloud.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for VirtualPrivateCloud's
// API operation CreateVpc for usage and error information.
func (c *VPC) CreateVpc(input *CreateVpcInput) (*CreateVpcOutput, error) {
	req, out := c.CreateVpcRequest(input)
	return out, req.Send()
}

// CreateVpcWithContext is the same as CreateVpc with the addition of
// the ability to pass a context and additional request options.
//
// See CreateVpc for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) CreateVpcWithContext(ctx sdf.Context, input *CreateVpcInput, opts ...request.Option) (*CreateVpcOutput, error) {
	req, out := c.CreateVpcRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteSubnet = "DeleteSubnet"

// DeleteSubnetRequest generates a "aws/request.Request" representing the
// client's request for the DeleteSubnet operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteSubnet for more information on using the DeleteSubnet
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteSubnetRequest method.
//    req, resp := client.DeleteSubnetRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DeleteSubnetRequest(input *DeleteSubnetInput) (req *request.Request, output *DeleteSubnetOutput) {
	op := &request.Operation{
		Name:       opDeleteSubnet,
		HTTPMethod: "GET",
		HTTPPath:   "/v2/index.php",
	}

	if input == nil {
		input = &DeleteSubnetInput{}
	}

	output = &DeleteSubnetOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DeleteSubnet API operation for VirtualPrivateCloud.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for VirtualPrivateCloud's
// API operation DeleteSubnet for usage and error information.
func (c *VPC) DeleteSubnet(input *DeleteSubnetInput) (*DeleteSubnetOutput, error) {
	req, out := c.DeleteSubnetRequest(input)
	return out, req.Send()
}

// DeleteSubnetWithContext is the same as DeleteSubnet with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteSubnet for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DeleteSubnetWithContext(ctx sdf.Context, input *DeleteSubnetInput, opts ...request.Option) (*DeleteSubnetOutput, error) {
	req, out := c.DeleteSubnetRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteVpc = "DeleteVpc"

// DeleteVpcRequest generates a "aws/request.Request" representing the
// client's request for the DeleteVpc operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteVpc for more information on using the DeleteVpc
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteVpcRequest method.
//    req, resp := client.DeleteVpcRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DeleteVpcRequest(input *DeleteVpcInput) (req *request.Request, output *DeleteVpcOutput) {
	op := &request.Operation{
		Name:       opDeleteVpc,
		HTTPMethod: "GET",
		HTTPPath:   "/v2/index.php",
	}

	if input == nil {
		input = &DeleteVpcInput{}
	}

	output = &DeleteVpcOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DeleteVpc API operation for VirtualPrivateCloud.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for VirtualPrivateCloud's
// API operation DeleteVpc for usage and error information.
func (c *VPC) DeleteVpc(input *DeleteVpcInput) (*DeleteVpcOutput, error) {
	req, out := c.DeleteVpcRequest(input)
	return out, req.Send()
}

// DeleteVpcWithContext is the same as DeleteVpc with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteVpc for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DeleteVpcWithContext(ctx sdf.Context, input *DeleteVpcInput, opts ...request.Option) (*DeleteVpcOutput, error) {
	req, out := c.DeleteVpcRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeSubnet = "DescribeSubnetEx"

// DescribeSubnetRequest generates a "aws/request.Request" representing the
// client's request for the DescribeSubnet operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeSubnet for more information on using the DescribeSubnet
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeSubnetRequest method.
//    req, resp := client.DescribeSubnetRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DescribeSubnetRequest(input *DescribeSubnetInput) (req *request.Request, output *DescribeSubnetOutput) {
	op := &request.Operation{
		Name:       opDescribeSubnet,
		HTTPMethod: "GET",
		HTTPPath:   "/v2/index.php",
	}

	if input == nil {
		input = &DescribeSubnetInput{}
	}

	output = &DescribeSubnetOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DescribeSubnet API operation for VirtualPrivateCloud.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for VirtualPrivateCloud's
// API operation DescribeSubnet for usage and error information.
func (c *VPC) DescribeSubnet(input *DescribeSubnetInput) (*DescribeSubnetOutput, error) {
	req, out := c.DescribeSubnetRequest(input)
	return out, req.Send()
}

// DescribeSubnetWithContext is the same as DescribeSubnet with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSubnet for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DescribeSubnetWithContext(ctx sdf.Context, input *DescribeSubnetInput, opts ...request.Option) (*DescribeSubnetOutput, error) {
	req, out := c.DescribeSubnetRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeVpc = "DescribeVpcEx"

// DescribeVpcRequest generates a "aws/request.Request" representing the
// client's request for the DescribeVpc operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeVpc for more information on using the DescribeVpc
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeVpcRequest method.
//    req, resp := client.DescribeVpcRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DescribeVpcRequest(input *DescribeVpcInput) (req *request.Request, output *DescribeVpcOutput) {
	op := &request.Operation{
		Name:       opDescribeVpc,
		HTTPMethod: "GET",
		HTTPPath:   "/v2/index.php",
		Paginator: &request.Paginator{
			InputTokens:     []string{"Offset"},
			OutputTokens:    []string{"Detail.TotalCount"},
			LimitToken:      "Limit",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &DescribeVpcInput{}
	}

	output = &DescribeVpcOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DescribeVpc API operation for VirtualPrivateCloud.
//
// 本接口 (DescribeVpc) ）用于根据多种索引查询一个或多个私有网络的基本信息。
//
// 接口请求域名：vpc.api.qcloud.com
//
//    * 可以根据实例ID、实例名称或者实例计费模式等信息来查询实例的详细信息。过滤信息详细请见过滤器Filter。
//    * 如果参数为空，返回当前用户一定数量（Limit所指定的数量，默认为20）的实例。
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for VirtualPrivateCloud's
// API operation DescribeVpc for usage and error information.
func (c *VPC) DescribeVpc(input *DescribeVpcInput) (*DescribeVpcOutput, error) {
	req, out := c.DescribeVpcRequest(input)
	return out, req.Send()
}

// DescribeVpcWithContext is the same as DescribeVpc with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeVpc for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DescribeVpcWithContext(ctx sdf.Context, input *DescribeVpcInput, opts ...request.Option) (*DescribeVpcOutput, error) {
	req, out := c.DescribeVpcRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

// DescribeVpcPages iterates over the pages of a DescribeVpc operation,
// calling the "fn" function with the response data for each page. To stop
// iterating, return false from the fn function.
//
// See DescribeVpc method for more information on how to use this operation.
//
// Note: This operation can generate multiple requests to a service.
//
//    // Example iterating over at most 3 pages of a DescribeVpc operation.
//    pageNum := 0
//    err := client.DescribeVpcPages(params,
//        func(page *DescribeVpcOutput, lastPage bool) bool {
//            pageNum++
//            fmt.Println(page)
//            return pageNum <= 3
//        })
//
func (c *VPC) DescribeVpcPages(input *DescribeVpcInput, fn func(*DescribeVpcOutput, bool) bool) error {
	return c.DescribeVpcPagesWithContext(sdf.BackgroundContext(), input, fn)
}

// DescribeVpcPagesWithContext same as DescribeVpcPages except
// it takes a Context and allows setting request options on the pages.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DescribeVpcPagesWithContext(ctx sdf.Context, input *DescribeVpcInput, fn func(*DescribeVpcOutput, bool) bool, opts ...request.Option) error {
	p := request.Pagination{
		NewRequest: func() (*request.Request, error) {
			var inCpy *DescribeVpcInput
			if input != nil {
				tmp := *input
				inCpy = &tmp
			}
			req, _ := c.DescribeVpcRequest(inCpy)
			req.SetContext(ctx)
			req.ApplyOptions(opts...)
			return req, nil
		},
	}

	cont := true
	for p.Next() && cont {
		cont = fn(p.Page().(*DescribeVpcOutput), !p.HasNextPage())
	}
	return p.Err()
}

type CreateSubnetInput struct {
	_ struct{} `type:"structure"`

	SubnetSet []*Subnet `locationName:"subnetSet" type:"list" flattened:"true"`

	VpcId *string `locationName:"vpcId" type:"string"`
}

// String returns the string representation
func (s CreateSubnetInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSubnetInput) GoString() string {
	return s.String()
}

// SetSubnetSet sets the SubnetSet field's value.
func (s *CreateSubnetInput) SetSubnetSet(v []*Subnet) *CreateSubnetInput {
	s.SubnetSet = v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *CreateSubnetInput) SetVpcId(v string) *CreateSubnetInput {
	s.VpcId = &v
	return s
}

type CreateSubnetOutput struct {
	_ struct{} `type:"structure"`

	Code *int64 `locationName:"code" type:"integer"`

	Message *string `locationName:"message" type:"string"`

	SubnetSet []*Subnet `locationName:"subnetSet" type:"list" flattened:"true"`
}

// String returns the string representation
func (s CreateSubnetOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSubnetOutput) GoString() string {
	return s.String()
}

// SetCode sets the Code field's value.
func (s *CreateSubnetOutput) SetCode(v int64) *CreateSubnetOutput {
	s.Code = &v
	return s
}

// SetMessage sets the Message field's value.
func (s *CreateSubnetOutput) SetMessage(v string) *CreateSubnetOutput {
	s.Message = &v
	return s
}

// SetSubnetSet sets the SubnetSet field's value.
func (s *CreateSubnetOutput) SetSubnetSet(v []*Subnet) *CreateSubnetOutput {
	s.SubnetSet = v
	return s
}

type CreateVpcInput struct {
	_ struct{} `type:"structure"`

	CidrBlock *string `locationName:"cidrBlock" type:"string"`

	SubnetSet []*Subnet `locationName:"subnetSet" type:"list" flattened:"true"`

	VpcName *string `locationName:"vpcName" type:"string"`
}

// String returns the string representation
func (s CreateVpcInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateVpcInput) GoString() string {
	return s.String()
}

// SetCidrBlock sets the CidrBlock field's value.
func (s *CreateVpcInput) SetCidrBlock(v string) *CreateVpcInput {
	s.CidrBlock = &v
	return s
}

// SetSubnetSet sets the SubnetSet field's value.
func (s *CreateVpcInput) SetSubnetSet(v []*Subnet) *CreateVpcInput {
	s.SubnetSet = v
	return s
}

// SetVpcName sets the VpcName field's value.
func (s *CreateVpcInput) SetVpcName(v string) *CreateVpcInput {
	s.VpcName = &v
	return s
}

type CreateVpcOutput struct {
	_ struct{} `type:"structure"`

	Code *int64 `locationName:"code" type:"integer"`

	CodeDesc *string `locationName:"codeDesc" type:"string"`

	Message *string `locationName:"message" type:"string"`

	RouteTableSet []*RouteTable `locationName:"routeTableSet" type:"list" flattened:"true"`

	SubnetSet []*Subnet `locationName:"subnetSet" type:"list" flattened:"true"`

	UniqVpcId *string `locationName:"uniqVpcId" type:"string"`

	VpcCreateTime *string `locationName:"vpcCreateTime" type:"string"`

	VpcId *string `locationName:"vpcId" type:"string"`
}

// String returns the string representation
func (s CreateVpcOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateVpcOutput) GoString() string {
	return s.String()
}

// SetCode sets the Code field's value.
func (s *CreateVpcOutput) SetCode(v int64) *CreateVpcOutput {
	s.Code = &v
	return s
}

// SetCodeDesc sets the CodeDesc field's value.
func (s *CreateVpcOutput) SetCodeDesc(v string) *CreateVpcOutput {
	s.CodeDesc = &v
	return s
}

// SetMessage sets the Message field's value.
func (s *CreateVpcOutput) SetMessage(v string) *CreateVpcOutput {
	s.Message = &v
	return s
}

// SetRouteTableSet sets the RouteTableSet field's value.
func (s *CreateVpcOutput) SetRouteTableSet(v []*RouteTable) *CreateVpcOutput {
	s.RouteTableSet = v
	return s
}

// SetSubnetSet sets the SubnetSet field's value.
func (s *CreateVpcOutput) SetSubnetSet(v []*Subnet) *CreateVpcOutput {
	s.SubnetSet = v
	return s
}

// SetUniqVpcId sets the UniqVpcId field's value.
func (s *CreateVpcOutput) SetUniqVpcId(v string) *CreateVpcOutput {
	s.UniqVpcId = &v
	return s
}

// SetVpcCreateTime sets the VpcCreateTime field's value.
func (s *CreateVpcOutput) SetVpcCreateTime(v string) *CreateVpcOutput {
	s.VpcCreateTime = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *CreateVpcOutput) SetVpcId(v string) *CreateVpcOutput {
	s.VpcId = &v
	return s
}

type DeleteSubnetInput struct {
	_ struct{} `type:"structure"`

	SubnetId *string `locationName:"subnetId" type:"string"`

	VpcId *string `locationName:"vpcId" type:"string"`
}

// String returns the string representation
func (s DeleteSubnetInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSubnetInput) GoString() string {
	return s.String()
}

// SetSubnetId sets the SubnetId field's value.
func (s *DeleteSubnetInput) SetSubnetId(v string) *DeleteSubnetInput {
	s.SubnetId = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *DeleteSubnetInput) SetVpcId(v string) *DeleteSubnetInput {
	s.VpcId = &v
	return s
}

type DeleteSubnetOutput struct {
	_ struct{} `type:"structure"`

	Code *int64 `locationName:"code" type:"integer"`

	Message *string `locationName:"message" type:"string"`
}

// String returns the string representation
func (s DeleteSubnetOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSubnetOutput) GoString() string {
	return s.String()
}

// SetCode sets the Code field's value.
func (s *DeleteSubnetOutput) SetCode(v int64) *DeleteSubnetOutput {
	s.Code = &v
	return s
}

// SetMessage sets the Message field's value.
func (s *DeleteSubnetOutput) SetMessage(v string) *DeleteSubnetOutput {
	s.Message = &v
	return s
}

type DeleteVpcInput struct {
	_ struct{} `type:"structure"`

	VpcId *string `locationName:"vpcId" type:"string"`
}

// String returns the string representation
func (s DeleteVpcInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteVpcInput) GoString() string {
	return s.String()
}

// SetVpcId sets the VpcId field's value.
func (s *DeleteVpcInput) SetVpcId(v string) *DeleteVpcInput {
	s.VpcId = &v
	return s
}

type DeleteVpcOutput struct {
	_ struct{} `type:"structure"`

	Code *int64 `locationName:"code" type:"integer"`

	CodeDesc *string `locationName:"codeDesc" type:"string"`

	Message *string `locationName:"message" type:"string"`
}

// String returns the string representation
func (s DeleteVpcOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteVpcOutput) GoString() string {
	return s.String()
}

// SetCode sets the Code field's value.
func (s *DeleteVpcOutput) SetCode(v int64) *DeleteVpcOutput {
	s.Code = &v
	return s
}

// SetCodeDesc sets the CodeDesc field's value.
func (s *DeleteVpcOutput) SetCodeDesc(v string) *DeleteVpcOutput {
	s.CodeDesc = &v
	return s
}

// SetMessage sets the Message field's value.
func (s *DeleteVpcOutput) SetMessage(v string) *DeleteVpcOutput {
	s.Message = &v
	return s
}

type DescribeSubnetInput struct {
	_ struct{} `type:"structure"`

	CodeDesc *string `locationName:"codeDesc" type:"string"`

	Limit *int64 `locationName:"Limit," type:"integer"`

	Offset *int64 `locationName:"Offset," type:"integer"`

	OrderDirection *string `locationName:"OffsetLine," type:"string"`

	OrderField *string `locationName:"orderField" type:"string"`

	SubnetId *string `locationName:"SubnetId" type:"string"`

	SubnetName *string `locationName:"subnetName" type:"string"`

	VpcId *string `locationName:"vpcId" type:"string"`

	ZoneIds []*string `locationName:"zoneIds" locationNameList:"item" type:"list" flattened:"true"`
}

// String returns the string representation
func (s DescribeSubnetInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSubnetInput) GoString() string {
	return s.String()
}

// SetCodeDesc sets the CodeDesc field's value.
func (s *DescribeSubnetInput) SetCodeDesc(v string) *DescribeSubnetInput {
	s.CodeDesc = &v
	return s
}

// SetLimit sets the Limit field's value.
func (s *DescribeSubnetInput) SetLimit(v int64) *DescribeSubnetInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *DescribeSubnetInput) SetOffset(v int64) *DescribeSubnetInput {
	s.Offset = &v
	return s
}

// SetOrderDirection sets the OrderDirection field's value.
func (s *DescribeSubnetInput) SetOrderDirection(v string) *DescribeSubnetInput {
	s.OrderDirection = &v
	return s
}

// SetOrderField sets the OrderField field's value.
func (s *DescribeSubnetInput) SetOrderField(v string) *DescribeSubnetInput {
	s.OrderField = &v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *DescribeSubnetInput) SetSubnetId(v string) *DescribeSubnetInput {
	s.SubnetId = &v
	return s
}

// SetSubnetName sets the SubnetName field's value.
func (s *DescribeSubnetInput) SetSubnetName(v string) *DescribeSubnetInput {
	s.SubnetName = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *DescribeSubnetInput) SetVpcId(v string) *DescribeSubnetInput {
	s.VpcId = &v
	return s
}

// SetZoneIds sets the ZoneIds field's value.
func (s *DescribeSubnetInput) SetZoneIds(v []*string) *DescribeSubnetInput {
	s.ZoneIds = v
	return s
}

type DescribeSubnetOutput struct {
	_ struct{} `type:"structure"`

	Code *int64 `locationName:"code" type:"integer"`

	Data []*Subnet `locationName:"data" type:"list" flattened:"true"`

	Message *string `locationName:"message" type:"string"`

	TotalCount *int64 `locationName:"totalCount" type:"integer"`
}

// String returns the string representation
func (s DescribeSubnetOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSubnetOutput) GoString() string {
	return s.String()
}

// SetCode sets the Code field's value.
func (s *DescribeSubnetOutput) SetCode(v int64) *DescribeSubnetOutput {
	s.Code = &v
	return s
}

// SetData sets the Data field's value.
func (s *DescribeSubnetOutput) SetData(v []*Subnet) *DescribeSubnetOutput {
	s.Data = v
	return s
}

// SetMessage sets the Message field's value.
func (s *DescribeSubnetOutput) SetMessage(v string) *DescribeSubnetOutput {
	s.Message = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeSubnetOutput) SetTotalCount(v int64) *DescribeSubnetOutput {
	s.TotalCount = &v
	return s
}

type DescribeVpcInput struct {
	_ struct{} `type:"structure"`

	Limit *int64 `locationName:"Limit," type:"integer"`

	Offset *int64 `locationName:"Offset," type:"integer"`

	OrderDirection *string `locationName:"OffsetLine," type:"string"`

	OrderField *string `locationName:"orderField" type:"string"`

	VpcId *string `locationName:"vpcId" type:"string"`

	VpcName *string `locationName:"VpcName" type:"string"`
}

// String returns the string representation
func (s DescribeVpcInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeVpcInput) GoString() string {
	return s.String()
}

// SetLimit sets the Limit field's value.
func (s *DescribeVpcInput) SetLimit(v int64) *DescribeVpcInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *DescribeVpcInput) SetOffset(v int64) *DescribeVpcInput {
	s.Offset = &v
	return s
}

// SetOrderDirection sets the OrderDirection field's value.
func (s *DescribeVpcInput) SetOrderDirection(v string) *DescribeVpcInput {
	s.OrderDirection = &v
	return s
}

// SetOrderField sets the OrderField field's value.
func (s *DescribeVpcInput) SetOrderField(v string) *DescribeVpcInput {
	s.OrderField = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *DescribeVpcInput) SetVpcId(v string) *DescribeVpcInput {
	s.VpcId = &v
	return s
}

// SetVpcName sets the VpcName field's value.
func (s *DescribeVpcInput) SetVpcName(v string) *DescribeVpcInput {
	s.VpcName = &v
	return s
}

type DescribeVpcOutput struct {
	_ struct{} `type:"structure"`

	Code *int64 `locationName:"code" type:"integer"`

	CodeDesc *string `locationName:"codeDesc" type:"string"`

	Data []*Vpc `locationName:"data" type:"list"`

	Message *string `locationName:"message" type:"string"`

	TotalCount *int64 `locationName:"totalCount" type:"integer"`
}

// String returns the string representation
func (s DescribeVpcOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeVpcOutput) GoString() string {
	return s.String()
}

// SetCode sets the Code field's value.
func (s *DescribeVpcOutput) SetCode(v int64) *DescribeVpcOutput {
	s.Code = &v
	return s
}

// SetCodeDesc sets the CodeDesc field's value.
func (s *DescribeVpcOutput) SetCodeDesc(v string) *DescribeVpcOutput {
	s.CodeDesc = &v
	return s
}

// SetData sets the Data field's value.
func (s *DescribeVpcOutput) SetData(v []*Vpc) *DescribeVpcOutput {
	s.Data = v
	return s
}

// SetMessage sets the Message field's value.
func (s *DescribeVpcOutput) SetMessage(v string) *DescribeVpcOutput {
	s.Message = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeVpcOutput) SetTotalCount(v int64) *DescribeVpcOutput {
	s.TotalCount = &v
	return s
}

type RouteTable struct {
	_ struct{} `type:"structure"`

	RouteTableId *string `locationName:"routeTableId" type:"string"`

	RouteTableName *string `locationName:"routeTableName" type:"string"`

	RouteTableType *int64 `locationName:"routeTableType" type:"integer"`
}

// String returns the string representation
func (s RouteTable) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s RouteTable) GoString() string {
	return s.String()
}

// SetRouteTableId sets the RouteTableId field's value.
func (s *RouteTable) SetRouteTableId(v string) *RouteTable {
	s.RouteTableId = &v
	return s
}

// SetRouteTableName sets the RouteTableName field's value.
func (s *RouteTable) SetRouteTableName(v string) *RouteTable {
	s.RouteTableName = &v
	return s
}

// SetRouteTableType sets the RouteTableType field's value.
func (s *RouteTable) SetRouteTableType(v int64) *RouteTable {
	s.RouteTableType = &v
	return s
}

type Subnet struct {
	_ struct{} `type:"structure"`

	AvailableIPNum *int64 `locationName:"availableIPNum" type:"integer"`

	Broadcast *bool `locationName:"broadcast" type:"boolean"`

	CidrBlock *string `locationName:"cidrBlock" type:"string"`

	IsDefault *bool `locationName:"isDefault" type:"boolean"`

	NetworkAclId *string `locationName:"networkAclId" type:"string"`

	RouteTableId *string `locationName:"routeTableId" type:"string"`

	SubnetId *string `locationName:"subnetId" type:"string"`

	SubnetName *string `locationName:"subnetName" type:"string"`

	TotalIPNum *int64 `locationName:"totalIPNum" type:"integer"`

	UnSubnetId *string `locationName:"unSubnetId" type:"string"`

	UniVpcId *string `locationName:"uniVpcId" type:"string"`

	VpcDevices *int64 `locationName:"vpcDevices" type:"integer"`

	VpcId *string `locationName:"vpcId" type:"string"`

	Zone *string `locationName:"zone" type:"string"`

	ZoneId *int64 `locationName:"zoneId" type:"integer"`
}

// String returns the string representation
func (s Subnet) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s Subnet) GoString() string {
	return s.String()
}

// SetAvailableIPNum sets the AvailableIPNum field's value.
func (s *Subnet) SetAvailableIPNum(v int64) *Subnet {
	s.AvailableIPNum = &v
	return s
}

// SetBroadcast sets the Broadcast field's value.
func (s *Subnet) SetBroadcast(v bool) *Subnet {
	s.Broadcast = &v
	return s
}

// SetCidrBlock sets the CidrBlock field's value.
func (s *Subnet) SetCidrBlock(v string) *Subnet {
	s.CidrBlock = &v
	return s
}

// SetIsDefault sets the IsDefault field's value.
func (s *Subnet) SetIsDefault(v bool) *Subnet {
	s.IsDefault = &v
	return s
}

// SetNetworkAclId sets the NetworkAclId field's value.
func (s *Subnet) SetNetworkAclId(v string) *Subnet {
	s.NetworkAclId = &v
	return s
}

// SetRouteTableId sets the RouteTableId field's value.
func (s *Subnet) SetRouteTableId(v string) *Subnet {
	s.RouteTableId = &v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *Subnet) SetSubnetId(v string) *Subnet {
	s.SubnetId = &v
	return s
}

// SetSubnetName sets the SubnetName field's value.
func (s *Subnet) SetSubnetName(v string) *Subnet {
	s.SubnetName = &v
	return s
}

// SetTotalIPNum sets the TotalIPNum field's value.
func (s *Subnet) SetTotalIPNum(v int64) *Subnet {
	s.TotalIPNum = &v
	return s
}

// SetUnSubnetId sets the UnSubnetId field's value.
func (s *Subnet) SetUnSubnetId(v string) *Subnet {
	s.UnSubnetId = &v
	return s
}

// SetUniVpcId sets the UniVpcId field's value.
func (s *Subnet) SetUniVpcId(v string) *Subnet {
	s.UniVpcId = &v
	return s
}

// SetVpcDevices sets the VpcDevices field's value.
func (s *Subnet) SetVpcDevices(v int64) *Subnet {
	s.VpcDevices = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *Subnet) SetVpcId(v string) *Subnet {
	s.VpcId = &v
	return s
}

// SetZone sets the Zone field's value.
func (s *Subnet) SetZone(v string) *Subnet {
	s.Zone = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *Subnet) SetZoneId(v int64) *Subnet {
	s.ZoneId = &v
	return s
}

type Vpc struct {
	_ struct{} `type:"structure"`

	CidrBlock *string `locationName:"cidrBlock" type:"string"`

	ClassicLinkNum *int64 `locationName:"classicLinkNum" type:"integer"`

	CreateTime *string `locationName:"createTime" type:"string"`

	IsDefault *bool `locationName:"isDefault" type:"boolean"`

	IsMulticast *bool `locationName:"isMulticast" type:"boolean"`

	NatNum *int64 `locationName:"natNum" type:"integer"`

	RouteTableNum *int64 `locationName:"routeTableNum" type:"integer"`

	SubnetNum *int64 `locationName:"subnetNum" type:"integer"`

	UnVpcId *string `locationName:"unVpcId" type:"string"`

	VpcDeviceNum *int64 `locationName:"vpcDeviceNum" type:"integer"`

	VpcId *string `locationName:"vpcId" type:"string"`

	VpcName *string `locationName:"vpcName" type:"string"`

	VpcPeerNum *int64 `locationName:"vpcPeerNum" type:"integer"`

	VpgNum *int64 `locationName:"vpgNum" type:"integer"`

	VpnGwNum *int64 `locationName:"vpnGwNum" type:"integer"`
}

// String returns the string representation
func (s Vpc) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s Vpc) GoString() string {
	return s.String()
}

// SetCidrBlock sets the CidrBlock field's value.
func (s *Vpc) SetCidrBlock(v string) *Vpc {
	s.CidrBlock = &v
	return s
}

// SetClassicLinkNum sets the ClassicLinkNum field's value.
func (s *Vpc) SetClassicLinkNum(v int64) *Vpc {
	s.ClassicLinkNum = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *Vpc) SetCreateTime(v string) *Vpc {
	s.CreateTime = &v
	return s
}

// SetIsDefault sets the IsDefault field's value.
func (s *Vpc) SetIsDefault(v bool) *Vpc {
	s.IsDefault = &v
	return s
}

// SetIsMulticast sets the IsMulticast field's value.
func (s *Vpc) SetIsMulticast(v bool) *Vpc {
	s.IsMulticast = &v
	return s
}

// SetNatNum sets the NatNum field's value.
func (s *Vpc) SetNatNum(v int64) *Vpc {
	s.NatNum = &v
	return s
}

// SetRouteTableNum sets the RouteTableNum field's value.
func (s *Vpc) SetRouteTableNum(v int64) *Vpc {
	s.RouteTableNum = &v
	return s
}

// SetSubnetNum sets the SubnetNum field's value.
func (s *Vpc) SetSubnetNum(v int64) *Vpc {
	s.SubnetNum = &v
	return s
}

// SetUnVpcId sets the UnVpcId field's value.
func (s *Vpc) SetUnVpcId(v string) *Vpc {
	s.UnVpcId = &v
	return s
}

// SetVpcDeviceNum sets the VpcDeviceNum field's value.
func (s *Vpc) SetVpcDeviceNum(v int64) *Vpc {
	s.VpcDeviceNum = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *Vpc) SetVpcId(v string) *Vpc {
	s.VpcId = &v
	return s
}

// SetVpcName sets the VpcName field's value.
func (s *Vpc) SetVpcName(v string) *Vpc {
	s.VpcName = &v
	return s
}

// SetVpcPeerNum sets the VpcPeerNum field's value.
func (s *Vpc) SetVpcPeerNum(v int64) *Vpc {
	s.VpcPeerNum = &v
	return s
}

// SetVpgNum sets the VpgNum field's value.
func (s *Vpc) SetVpgNum(v int64) *Vpc {
	s.VpgNum = &v
	return s
}

// SetVpnGwNum sets the VpnGwNum field's value.
func (s *Vpc) SetVpnGwNum(v int64) *Vpc {
	s.VpnGwNum = &v
	return s
}
