// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package vpc

import (
	"github.com/polefishu/sdk-builder/sdf"
	"github.com/polefishu/sdk-builder/sdf/request"
	"github.com/polefishu/sdk-builder/sdf/sdfutil"
)

const opCreateSecurityGroup = "CreateSecurityGroup"

// CreateSecurityGroupRequest generates a "aws/request.Request" representing the
// client's request for the CreateSecurityGroup operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateSecurityGroup for more information on using the CreateSecurityGroup
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateSecurityGroupRequest method.
//    req, resp := client.CreateSecurityGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) CreateSecurityGroupRequest(input *CreateSecurityGroupInput) (req *request.Request, output *CreateSecurityGroupOutput) {
	op := &request.Operation{
		Name:       opCreateSecurityGroup,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateSecurityGroupInput{}
	}

	output = &CreateSecurityGroupOutput{}
	req = c.newRequest(op, input, output)
	return
}

// CreateSecurityGroup API operation for VirtualPrivateCloud.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for VirtualPrivateCloud's
// API operation CreateSecurityGroup for usage and error information.
func (c *VPC) CreateSecurityGroup(input *CreateSecurityGroupInput) (*CreateSecurityGroupOutput, error) {
	req, out := c.CreateSecurityGroupRequest(input)
	return out, req.Send()
}

// CreateSecurityGroupWithContext is the same as CreateSecurityGroup with the addition of
// the ability to pass a context and additional request options.
//
// See CreateSecurityGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) CreateSecurityGroupWithContext(ctx sdf.Context, input *CreateSecurityGroupInput, opts ...request.Option) (*CreateSecurityGroupOutput, error) {
	req, out := c.CreateSecurityGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateSecurityGroupPolicies = "CreateSecurityGroupPolicies"

// CreateSecurityGroupPoliciesRequest generates a "aws/request.Request" representing the
// client's request for the CreateSecurityGroupPolicies operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateSecurityGroupPolicies for more information on using the CreateSecurityGroupPolicies
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateSecurityGroupPoliciesRequest method.
//    req, resp := client.CreateSecurityGroupPoliciesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) CreateSecurityGroupPoliciesRequest(input *CreateSecurityGroupPoliciesInput) (req *request.Request, output *CreateSecurityGroupPoliciesOutput) {
	op := &request.Operation{
		Name:       opCreateSecurityGroupPolicies,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateSecurityGroupPoliciesInput{}
	}

	output = &CreateSecurityGroupPoliciesOutput{}
	req = c.newRequest(op, input, output)
	return
}

// CreateSecurityGroupPolicies API operation for VirtualPrivateCloud.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for VirtualPrivateCloud's
// API operation CreateSecurityGroupPolicies for usage and error information.
func (c *VPC) CreateSecurityGroupPolicies(input *CreateSecurityGroupPoliciesInput) (*CreateSecurityGroupPoliciesOutput, error) {
	req, out := c.CreateSecurityGroupPoliciesRequest(input)
	return out, req.Send()
}

// CreateSecurityGroupPoliciesWithContext is the same as CreateSecurityGroupPolicies with the addition of
// the ability to pass a context and additional request options.
//
// See CreateSecurityGroupPolicies for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) CreateSecurityGroupPoliciesWithContext(ctx sdf.Context, input *CreateSecurityGroupPoliciesInput, opts ...request.Option) (*CreateSecurityGroupPoliciesOutput, error) {
	req, out := c.CreateSecurityGroupPoliciesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateSubnet = "CreateSubnet"

// CreateSubnetRequest generates a "aws/request.Request" representing the
// client's request for the CreateSubnet operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateSubnet for more information on using the CreateSubnet
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateSubnetRequest method.
//    req, resp := client.CreateSubnetRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) CreateSubnetRequest(input *CreateSubnetInput) (req *request.Request, output *CreateSubnetOutput) {
	op := &request.Operation{
		Name:       opCreateSubnet,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateSubnetInput{}
	}

	output = &CreateSubnetOutput{}
	req = c.newRequest(op, input, output)
	return
}

// CreateSubnet API operation for VirtualPrivateCloud.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for VirtualPrivateCloud's
// API operation CreateSubnet for usage and error information.
func (c *VPC) CreateSubnet(input *CreateSubnetInput) (*CreateSubnetOutput, error) {
	req, out := c.CreateSubnetRequest(input)
	return out, req.Send()
}

// CreateSubnetWithContext is the same as CreateSubnet with the addition of
// the ability to pass a context and additional request options.
//
// See CreateSubnet for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) CreateSubnetWithContext(ctx sdf.Context, input *CreateSubnetInput, opts ...request.Option) (*CreateSubnetOutput, error) {
	req, out := c.CreateSubnetRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateVpc = "CreateVpc"

// CreateVpcRequest generates a "aws/request.Request" representing the
// client's request for the CreateVpc operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateVpc for more information on using the CreateVpc
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateVpcRequest method.
//    req, resp := client.CreateVpcRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) CreateVpcRequest(input *CreateVpcInput) (req *request.Request, output *CreateVpcOutput) {
	op := &request.Operation{
		Name:       opCreateVpc,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateVpcInput{}
	}

	output = &CreateVpcOutput{}
	req = c.newRequest(op, input, output)
	return
}

// CreateVpc API operation for VirtualPrivateCloud.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for VirtualPrivateCloud's
// API operation CreateVpc for usage and error information.
func (c *VPC) CreateVpc(input *CreateVpcInput) (*CreateVpcOutput, error) {
	req, out := c.CreateVpcRequest(input)
	return out, req.Send()
}

// CreateVpcWithContext is the same as CreateVpc with the addition of
// the ability to pass a context and additional request options.
//
// See CreateVpc for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) CreateVpcWithContext(ctx sdf.Context, input *CreateVpcInput, opts ...request.Option) (*CreateVpcOutput, error) {
	req, out := c.CreateVpcRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteSecurityGroup = "DeleteSecurityGroup"

// DeleteSecurityGroupRequest generates a "aws/request.Request" representing the
// client's request for the DeleteSecurityGroup operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteSecurityGroup for more information on using the DeleteSecurityGroup
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteSecurityGroupRequest method.
//    req, resp := client.DeleteSecurityGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DeleteSecurityGroupRequest(input *DeleteSecurityGroupInput) (req *request.Request, output *DeleteSecurityGroupOutput) {
	op := &request.Operation{
		Name:       opDeleteSecurityGroup,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteSecurityGroupInput{}
	}

	output = &DeleteSecurityGroupOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DeleteSecurityGroup API operation for VirtualPrivateCloud.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for VirtualPrivateCloud's
// API operation DeleteSecurityGroup for usage and error information.
func (c *VPC) DeleteSecurityGroup(input *DeleteSecurityGroupInput) (*DeleteSecurityGroupOutput, error) {
	req, out := c.DeleteSecurityGroupRequest(input)
	return out, req.Send()
}

// DeleteSecurityGroupWithContext is the same as DeleteSecurityGroup with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteSecurityGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DeleteSecurityGroupWithContext(ctx sdf.Context, input *DeleteSecurityGroupInput, opts ...request.Option) (*DeleteSecurityGroupOutput, error) {
	req, out := c.DeleteSecurityGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteSecurityGroupPolicies = "DeleteSecurityGroupPolicies"

// DeleteSecurityGroupPoliciesRequest generates a "aws/request.Request" representing the
// client's request for the DeleteSecurityGroupPolicies operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteSecurityGroupPolicies for more information on using the DeleteSecurityGroupPolicies
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteSecurityGroupPoliciesRequest method.
//    req, resp := client.DeleteSecurityGroupPoliciesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DeleteSecurityGroupPoliciesRequest(input *DeleteSecurityGroupPoliciesInput) (req *request.Request, output *DeleteSecurityGroupPoliciesOutput) {
	op := &request.Operation{
		Name:       opDeleteSecurityGroupPolicies,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteSecurityGroupPoliciesInput{}
	}

	output = &DeleteSecurityGroupPoliciesOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DeleteSecurityGroupPolicies API operation for VirtualPrivateCloud.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for VirtualPrivateCloud's
// API operation DeleteSecurityGroupPolicies for usage and error information.
func (c *VPC) DeleteSecurityGroupPolicies(input *DeleteSecurityGroupPoliciesInput) (*DeleteSecurityGroupPoliciesOutput, error) {
	req, out := c.DeleteSecurityGroupPoliciesRequest(input)
	return out, req.Send()
}

// DeleteSecurityGroupPoliciesWithContext is the same as DeleteSecurityGroupPolicies with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteSecurityGroupPolicies for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DeleteSecurityGroupPoliciesWithContext(ctx sdf.Context, input *DeleteSecurityGroupPoliciesInput, opts ...request.Option) (*DeleteSecurityGroupPoliciesOutput, error) {
	req, out := c.DeleteSecurityGroupPoliciesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteSubnet = "DeleteSubnet"

// DeleteSubnetRequest generates a "aws/request.Request" representing the
// client's request for the DeleteSubnet operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteSubnet for more information on using the DeleteSubnet
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteSubnetRequest method.
//    req, resp := client.DeleteSubnetRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DeleteSubnetRequest(input *DeleteSubnetInput) (req *request.Request, output *DeleteSubnetOutput) {
	op := &request.Operation{
		Name:       opDeleteSubnet,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteSubnetInput{}
	}

	output = &DeleteSubnetOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DeleteSubnet API operation for VirtualPrivateCloud.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for VirtualPrivateCloud's
// API operation DeleteSubnet for usage and error information.
func (c *VPC) DeleteSubnet(input *DeleteSubnetInput) (*DeleteSubnetOutput, error) {
	req, out := c.DeleteSubnetRequest(input)
	return out, req.Send()
}

// DeleteSubnetWithContext is the same as DeleteSubnet with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteSubnet for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DeleteSubnetWithContext(ctx sdf.Context, input *DeleteSubnetInput, opts ...request.Option) (*DeleteSubnetOutput, error) {
	req, out := c.DeleteSubnetRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteVpc = "DeleteVpc"

// DeleteVpcRequest generates a "aws/request.Request" representing the
// client's request for the DeleteVpc operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteVpc for more information on using the DeleteVpc
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteVpcRequest method.
//    req, resp := client.DeleteVpcRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DeleteVpcRequest(input *DeleteVpcInput) (req *request.Request, output *DeleteVpcOutput) {
	op := &request.Operation{
		Name:       opDeleteVpc,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteVpcInput{}
	}

	output = &DeleteVpcOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DeleteVpc API operation for VirtualPrivateCloud.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for VirtualPrivateCloud's
// API operation DeleteVpc for usage and error information.
func (c *VPC) DeleteVpc(input *DeleteVpcInput) (*DeleteVpcOutput, error) {
	req, out := c.DeleteVpcRequest(input)
	return out, req.Send()
}

// DeleteVpcWithContext is the same as DeleteVpc with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteVpc for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DeleteVpcWithContext(ctx sdf.Context, input *DeleteVpcInput, opts ...request.Option) (*DeleteVpcOutput, error) {
	req, out := c.DeleteVpcRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeSecurityGroupPolicies = "DescribeSecurityGroupPolicies"

// DescribeSecurityGroupPoliciesRequest generates a "aws/request.Request" representing the
// client's request for the DescribeSecurityGroupPolicies operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeSecurityGroupPolicies for more information on using the DescribeSecurityGroupPolicies
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeSecurityGroupPoliciesRequest method.
//    req, resp := client.DescribeSecurityGroupPoliciesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DescribeSecurityGroupPoliciesRequest(input *DescribeSecurityGroupPoliciesInput) (req *request.Request, output *DescribeSecurityGroupPoliciesOutput) {
	op := &request.Operation{
		Name:       opDescribeSecurityGroupPolicies,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeSecurityGroupPoliciesInput{}
	}

	output = &DescribeSecurityGroupPoliciesOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DescribeSecurityGroupPolicies API operation for VirtualPrivateCloud.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for VirtualPrivateCloud's
// API operation DescribeSecurityGroupPolicies for usage and error information.
func (c *VPC) DescribeSecurityGroupPolicies(input *DescribeSecurityGroupPoliciesInput) (*DescribeSecurityGroupPoliciesOutput, error) {
	req, out := c.DescribeSecurityGroupPoliciesRequest(input)
	return out, req.Send()
}

// DescribeSecurityGroupPoliciesWithContext is the same as DescribeSecurityGroupPolicies with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSecurityGroupPolicies for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DescribeSecurityGroupPoliciesWithContext(ctx sdf.Context, input *DescribeSecurityGroupPoliciesInput, opts ...request.Option) (*DescribeSecurityGroupPoliciesOutput, error) {
	req, out := c.DescribeSecurityGroupPoliciesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeSecurityGroups = "DescribeSecurityGroups"

// DescribeSecurityGroupsRequest generates a "aws/request.Request" representing the
// client's request for the DescribeSecurityGroups operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeSecurityGroups for more information on using the DescribeSecurityGroups
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeSecurityGroupsRequest method.
//    req, resp := client.DescribeSecurityGroupsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DescribeSecurityGroupsRequest(input *DescribeSecurityGroupsInput) (req *request.Request, output *DescribeSecurityGroupsOutput) {
	op := &request.Operation{
		Name:       opDescribeSecurityGroups,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeSecurityGroupsInput{}
	}

	output = &DescribeSecurityGroupsOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DescribeSecurityGroups API operation for VirtualPrivateCloud.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for VirtualPrivateCloud's
// API operation DescribeSecurityGroups for usage and error information.
func (c *VPC) DescribeSecurityGroups(input *DescribeSecurityGroupsInput) (*DescribeSecurityGroupsOutput, error) {
	req, out := c.DescribeSecurityGroupsRequest(input)
	return out, req.Send()
}

// DescribeSecurityGroupsWithContext is the same as DescribeSecurityGroups with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSecurityGroups for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DescribeSecurityGroupsWithContext(ctx sdf.Context, input *DescribeSecurityGroupsInput, opts ...request.Option) (*DescribeSecurityGroupsOutput, error) {
	req, out := c.DescribeSecurityGroupsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeSubnets = "DescribeSubnets"

// DescribeSubnetsRequest generates a "aws/request.Request" representing the
// client's request for the DescribeSubnets operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeSubnets for more information on using the DescribeSubnets
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeSubnetsRequest method.
//    req, resp := client.DescribeSubnetsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DescribeSubnetsRequest(input *DescribeSubnetsInput) (req *request.Request, output *DescribeSubnetsOutput) {
	op := &request.Operation{
		Name:       opDescribeSubnets,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeSubnetsInput{}
	}

	output = &DescribeSubnetsOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DescribeSubnets API operation for VirtualPrivateCloud.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for VirtualPrivateCloud's
// API operation DescribeSubnets for usage and error information.
func (c *VPC) DescribeSubnets(input *DescribeSubnetsInput) (*DescribeSubnetsOutput, error) {
	req, out := c.DescribeSubnetsRequest(input)
	return out, req.Send()
}

// DescribeSubnetsWithContext is the same as DescribeSubnets with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSubnets for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DescribeSubnetsWithContext(ctx sdf.Context, input *DescribeSubnetsInput, opts ...request.Option) (*DescribeSubnetsOutput, error) {
	req, out := c.DescribeSubnetsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeVpcs = "DescribeVpcs"

// DescribeVpcsRequest generates a "aws/request.Request" representing the
// client's request for the DescribeVpcs operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeVpcs for more information on using the DescribeVpcs
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeVpcsRequest method.
//    req, resp := client.DescribeVpcsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DescribeVpcsRequest(input *DescribeVpcsInput) (req *request.Request, output *DescribeVpcsOutput) {
	op := &request.Operation{
		Name:       opDescribeVpcs,
		HTTPMethod: "GET",
		HTTPPath:   "/",
		Paginator: &request.Paginator{
			InputTokens:     []string{"Offset"},
			OutputTokens:    []string{"Response.TotalCount"},
			LimitToken:      "Limit",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &DescribeVpcsInput{}
	}

	output = &DescribeVpcsOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DescribeVpcs API operation for VirtualPrivateCloud.
//
// 本接口 (DescribeVpc) ）用于根据多种索引查询一个或多个私有网络的基本信息。
//
// 接口请求域名：vpc.api.qcloud.com
//
//    * 可以根据实例ID、实例名称或者实例计费模式等信息来查询实例的详细信息。过滤信息详细请见过滤器Filter。
//    * 如果参数为空，返回当前用户一定数量（Limit所指定的数量，默认为20）的实例。
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for VirtualPrivateCloud's
// API operation DescribeVpcs for usage and error information.
func (c *VPC) DescribeVpcs(input *DescribeVpcsInput) (*DescribeVpcsOutput, error) {
	req, out := c.DescribeVpcsRequest(input)
	return out, req.Send()
}

// DescribeVpcsWithContext is the same as DescribeVpcs with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeVpcs for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DescribeVpcsWithContext(ctx sdf.Context, input *DescribeVpcsInput, opts ...request.Option) (*DescribeVpcsOutput, error) {
	req, out := c.DescribeVpcsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

// DescribeVpcsPages iterates over the pages of a DescribeVpcs operation,
// calling the "fn" function with the response data for each page. To stop
// iterating, return false from the fn function.
//
// See DescribeVpcs method for more information on how to use this operation.
//
// Note: This operation can generate multiple requests to a service.
//
//    // Example iterating over at most 3 pages of a DescribeVpcs operation.
//    pageNum := 0
//    err := client.DescribeVpcsPages(params,
//        func(page *DescribeVpcsOutput, lastPage bool) bool {
//            pageNum++
//            fmt.Println(page)
//            return pageNum <= 3
//        })
//
func (c *VPC) DescribeVpcsPages(input *DescribeVpcsInput, fn func(*DescribeVpcsOutput, bool) bool) error {
	return c.DescribeVpcsPagesWithContext(sdf.BackgroundContext(), input, fn)
}

// DescribeVpcsPagesWithContext same as DescribeVpcsPages except
// it takes a Context and allows setting request options on the pages.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DescribeVpcsPagesWithContext(ctx sdf.Context, input *DescribeVpcsInput, fn func(*DescribeVpcsOutput, bool) bool, opts ...request.Option) error {
	p := request.Pagination{
		NewRequest: func() (*request.Request, error) {
			var inCpy *DescribeVpcsInput
			if input != nil {
				tmp := *input
				inCpy = &tmp
			}
			req, _ := c.DescribeVpcsRequest(inCpy)
			req.SetContext(ctx)
			req.ApplyOptions(opts...)
			return req, nil
		},
	}

	cont := true
	for p.Next() && cont {
		cont = fn(p.Page().(*DescribeVpcsOutput), !p.HasNextPage())
	}
	return p.Err()
}

type CreateSecurityGroup struct {
	_ struct{} `type:"structure"`

	RequestID *string `locationName:"RequestId" type:"string"`

	SecurityGroup *SecurityGroup `locationName:"SecurityGroup" type:"structure"`
}

// String returns the string representation
func (s CreateSecurityGroup) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSecurityGroup) GoString() string {
	return s.String()
}

// SetRequestID sets the RequestID field's value.
func (s *CreateSecurityGroup) SetRequestID(v string) *CreateSecurityGroup {
	s.RequestID = &v
	return s
}

// SetSecurityGroup sets the SecurityGroup field's value.
func (s *CreateSecurityGroup) SetSecurityGroup(v *SecurityGroup) *CreateSecurityGroup {
	s.SecurityGroup = v
	return s
}

type CreateSecurityGroupInput struct {
	_ struct{} `type:"structure"`

	GroupDescription *string `locationName:"GroupDescription" type:"string"`

	GroupName *string `locationName:"GroupName" type:"string"`

	ProjectId *string `type:"string"`
}

// String returns the string representation
func (s CreateSecurityGroupInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSecurityGroupInput) GoString() string {
	return s.String()
}

// SetGroupDescription sets the GroupDescription field's value.
func (s *CreateSecurityGroupInput) SetGroupDescription(v string) *CreateSecurityGroupInput {
	s.GroupDescription = &v
	return s
}

// SetGroupName sets the GroupName field's value.
func (s *CreateSecurityGroupInput) SetGroupName(v string) *CreateSecurityGroupInput {
	s.GroupName = &v
	return s
}

// SetProjectId sets the ProjectId field's value.
func (s *CreateSecurityGroupInput) SetProjectId(v string) *CreateSecurityGroupInput {
	s.ProjectId = &v
	return s
}

type CreateSecurityGroupOutput struct {
	_ struct{} `type:"structure"`

	Response *CreateSecurityGroup `type:"structure"`
}

// String returns the string representation
func (s CreateSecurityGroupOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSecurityGroupOutput) GoString() string {
	return s.String()
}

// SetResponse sets the Response field's value.
func (s *CreateSecurityGroupOutput) SetResponse(v *CreateSecurityGroup) *CreateSecurityGroupOutput {
	s.Response = v
	return s
}

type CreateSecurityGroupPolicies struct {
	_ struct{} `type:"structure"`

	RequestID *string `locationName:"RequestId" type:"string"`
}

// String returns the string representation
func (s CreateSecurityGroupPolicies) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSecurityGroupPolicies) GoString() string {
	return s.String()
}

// SetRequestID sets the RequestID field's value.
func (s *CreateSecurityGroupPolicies) SetRequestID(v string) *CreateSecurityGroupPolicies {
	s.RequestID = &v
	return s
}

type CreateSecurityGroupPoliciesInput struct {
	_ struct{} `type:"structure"`

	// SecurityGroupId is a required field
	SecurityGroupId *string `locationName:"SecurityGroupId" type:"string" required:"true"`

	// SecurityGroupPolicySet is a required field
	SecurityGroupPolicySet *SecurityGroupPolicyData `locationName:"SecurityGroupPolicySet" type:"structure" required:"true"`
}

// String returns the string representation
func (s CreateSecurityGroupPoliciesInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSecurityGroupPoliciesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateSecurityGroupPoliciesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateSecurityGroupPoliciesInput"}
	if s.SecurityGroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("SecurityGroupId"))
	}
	if s.SecurityGroupPolicySet == nil {
		invalidParams.Add(request.NewErrParamRequired("SecurityGroupPolicySet"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSecurityGroupId sets the SecurityGroupId field's value.
func (s *CreateSecurityGroupPoliciesInput) SetSecurityGroupId(v string) *CreateSecurityGroupPoliciesInput {
	s.SecurityGroupId = &v
	return s
}

// SetSecurityGroupPolicySet sets the SecurityGroupPolicySet field's value.
func (s *CreateSecurityGroupPoliciesInput) SetSecurityGroupPolicySet(v *SecurityGroupPolicyData) *CreateSecurityGroupPoliciesInput {
	s.SecurityGroupPolicySet = v
	return s
}

type CreateSecurityGroupPoliciesOutput struct {
	_ struct{} `type:"structure"`

	Response *CreateSecurityGroupPolicies `type:"structure"`
}

// String returns the string representation
func (s CreateSecurityGroupPoliciesOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSecurityGroupPoliciesOutput) GoString() string {
	return s.String()
}

// SetResponse sets the Response field's value.
func (s *CreateSecurityGroupPoliciesOutput) SetResponse(v *CreateSecurityGroupPolicies) *CreateSecurityGroupPoliciesOutput {
	s.Response = v
	return s
}

type CreateSubnet struct {
	_ struct{} `type:"structure"`

	RequestID *string `locationName:"RequestId" type:"string"`

	Subnet *Subnet `locationName:"Subnet" type:"structure"`
}

// String returns the string representation
func (s CreateSubnet) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSubnet) GoString() string {
	return s.String()
}

// SetRequestID sets the RequestID field's value.
func (s *CreateSubnet) SetRequestID(v string) *CreateSubnet {
	s.RequestID = &v
	return s
}

// SetSubnet sets the Subnet field's value.
func (s *CreateSubnet) SetSubnet(v *Subnet) *CreateSubnet {
	s.Subnet = v
	return s
}

type CreateSubnetInput struct {
	_ struct{} `type:"structure"`

	// CidrBlock is a required field
	CidrBlock *string `locationName:"CidrBlock" type:"string" required:"true"`

	// SubnetName is a required field
	SubnetName *string `locationName:"SubnetName" type:"string" required:"true"`

	// VpcId is a required field
	VpcId *string `locationName:"VpcId" type:"string" required:"true"`

	// Zone is a required field
	Zone *string `locationName:"Zone" type:"string" required:"true"`
}

// String returns the string representation
func (s CreateSubnetInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSubnetInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateSubnetInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateSubnetInput"}
	if s.CidrBlock == nil {
		invalidParams.Add(request.NewErrParamRequired("CidrBlock"))
	}
	if s.SubnetName == nil {
		invalidParams.Add(request.NewErrParamRequired("SubnetName"))
	}
	if s.VpcId == nil {
		invalidParams.Add(request.NewErrParamRequired("VpcId"))
	}
	if s.Zone == nil {
		invalidParams.Add(request.NewErrParamRequired("Zone"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCidrBlock sets the CidrBlock field's value.
func (s *CreateSubnetInput) SetCidrBlock(v string) *CreateSubnetInput {
	s.CidrBlock = &v
	return s
}

// SetSubnetName sets the SubnetName field's value.
func (s *CreateSubnetInput) SetSubnetName(v string) *CreateSubnetInput {
	s.SubnetName = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *CreateSubnetInput) SetVpcId(v string) *CreateSubnetInput {
	s.VpcId = &v
	return s
}

// SetZone sets the Zone field's value.
func (s *CreateSubnetInput) SetZone(v string) *CreateSubnetInput {
	s.Zone = &v
	return s
}

type CreateSubnetOutput struct {
	_ struct{} `type:"structure"`

	Response *CreateSubnet `type:"structure"`
}

// String returns the string representation
func (s CreateSubnetOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSubnetOutput) GoString() string {
	return s.String()
}

// SetResponse sets the Response field's value.
func (s *CreateSubnetOutput) SetResponse(v *CreateSubnet) *CreateSubnetOutput {
	s.Response = v
	return s
}

type CreateVpc struct {
	_ struct{} `type:"structure"`

	RequestID *string `locationName:"RequestId" type:"string"`

	Vpc *Vpc `locationName:"Vpc" type:"structure"`
}

// String returns the string representation
func (s CreateVpc) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateVpc) GoString() string {
	return s.String()
}

// SetRequestID sets the RequestID field's value.
func (s *CreateVpc) SetRequestID(v string) *CreateVpc {
	s.RequestID = &v
	return s
}

// SetVpc sets the Vpc field's value.
func (s *CreateVpc) SetVpc(v *Vpc) *CreateVpc {
	s.Vpc = v
	return s
}

type CreateVpcInput struct {
	_ struct{} `type:"structure"`

	CidrBlock *string `locationName:"CidrBlock" type:"string"`

	DnsServers []*string `locationName:"DnsServers" type:"list" flattened:"true"`

	DomainName *string `locationName:"DomainName" type:"string"`

	EnableMulticast *bool `locationName:"EnableMulticast" type:"boolean"`

	VpcName *string `locationName:"VpcName" type:"string"`
}

// String returns the string representation
func (s CreateVpcInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateVpcInput) GoString() string {
	return s.String()
}

// SetCidrBlock sets the CidrBlock field's value.
func (s *CreateVpcInput) SetCidrBlock(v string) *CreateVpcInput {
	s.CidrBlock = &v
	return s
}

// SetDnsServers sets the DnsServers field's value.
func (s *CreateVpcInput) SetDnsServers(v []*string) *CreateVpcInput {
	s.DnsServers = v
	return s
}

// SetDomainName sets the DomainName field's value.
func (s *CreateVpcInput) SetDomainName(v string) *CreateVpcInput {
	s.DomainName = &v
	return s
}

// SetEnableMulticast sets the EnableMulticast field's value.
func (s *CreateVpcInput) SetEnableMulticast(v bool) *CreateVpcInput {
	s.EnableMulticast = &v
	return s
}

// SetVpcName sets the VpcName field's value.
func (s *CreateVpcInput) SetVpcName(v string) *CreateVpcInput {
	s.VpcName = &v
	return s
}

type CreateVpcOutput struct {
	_ struct{} `type:"structure"`

	Response *CreateVpc `type:"structure"`
}

// String returns the string representation
func (s CreateVpcOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateVpcOutput) GoString() string {
	return s.String()
}

// SetResponse sets the Response field's value.
func (s *CreateVpcOutput) SetResponse(v *CreateVpc) *CreateVpcOutput {
	s.Response = v
	return s
}

type DeleteSecurityGroup struct {
	_ struct{} `type:"structure"`

	RequestID *string `locationName:"RequestId" type:"string"`
}

// String returns the string representation
func (s DeleteSecurityGroup) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSecurityGroup) GoString() string {
	return s.String()
}

// SetRequestID sets the RequestID field's value.
func (s *DeleteSecurityGroup) SetRequestID(v string) *DeleteSecurityGroup {
	s.RequestID = &v
	return s
}

type DeleteSecurityGroupInput struct {
	_ struct{} `type:"structure"`

	SecurityGroupId *string `locationName:"SecurityGroupId" type:"string"`
}

// String returns the string representation
func (s DeleteSecurityGroupInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSecurityGroupInput) GoString() string {
	return s.String()
}

// SetSecurityGroupId sets the SecurityGroupId field's value.
func (s *DeleteSecurityGroupInput) SetSecurityGroupId(v string) *DeleteSecurityGroupInput {
	s.SecurityGroupId = &v
	return s
}

type DeleteSecurityGroupOutput struct {
	_ struct{} `type:"structure"`

	Response *DeleteSecurityGroup `type:"structure"`
}

// String returns the string representation
func (s DeleteSecurityGroupOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSecurityGroupOutput) GoString() string {
	return s.String()
}

// SetResponse sets the Response field's value.
func (s *DeleteSecurityGroupOutput) SetResponse(v *DeleteSecurityGroup) *DeleteSecurityGroupOutput {
	s.Response = v
	return s
}

type DeleteSecurityGroupPolicies struct {
	_ struct{} `type:"structure"`

	RequestID *string `locationName:"RequestId" type:"string"`
}

// String returns the string representation
func (s DeleteSecurityGroupPolicies) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSecurityGroupPolicies) GoString() string {
	return s.String()
}

// SetRequestID sets the RequestID field's value.
func (s *DeleteSecurityGroupPolicies) SetRequestID(v string) *DeleteSecurityGroupPolicies {
	s.RequestID = &v
	return s
}

type DeleteSecurityGroupPoliciesInput struct {
	_ struct{} `type:"structure"`

	// SecurityGroupId is a required field
	SecurityGroupId *string `locationName:"SecurityGroupId" type:"string" required:"true"`

	// SecurityGroupPolicySet is a required field
	SecurityGroupPolicySet *SecurityGroupPolicyData `locationName:"SecurityGroupPolicySet" type:"structure" required:"true"`
}

// String returns the string representation
func (s DeleteSecurityGroupPoliciesInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSecurityGroupPoliciesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteSecurityGroupPoliciesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteSecurityGroupPoliciesInput"}
	if s.SecurityGroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("SecurityGroupId"))
	}
	if s.SecurityGroupPolicySet == nil {
		invalidParams.Add(request.NewErrParamRequired("SecurityGroupPolicySet"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSecurityGroupId sets the SecurityGroupId field's value.
func (s *DeleteSecurityGroupPoliciesInput) SetSecurityGroupId(v string) *DeleteSecurityGroupPoliciesInput {
	s.SecurityGroupId = &v
	return s
}

// SetSecurityGroupPolicySet sets the SecurityGroupPolicySet field's value.
func (s *DeleteSecurityGroupPoliciesInput) SetSecurityGroupPolicySet(v *SecurityGroupPolicyData) *DeleteSecurityGroupPoliciesInput {
	s.SecurityGroupPolicySet = v
	return s
}

type DeleteSecurityGroupPoliciesOutput struct {
	_ struct{} `type:"structure"`

	Response *DeleteSecurityGroupPolicies `type:"structure"`
}

// String returns the string representation
func (s DeleteSecurityGroupPoliciesOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSecurityGroupPoliciesOutput) GoString() string {
	return s.String()
}

// SetResponse sets the Response field's value.
func (s *DeleteSecurityGroupPoliciesOutput) SetResponse(v *DeleteSecurityGroupPolicies) *DeleteSecurityGroupPoliciesOutput {
	s.Response = v
	return s
}

type DeleteSubnetInput struct {
	_ struct{} `type:"structure"`

	SubnetId *string `locationName:"SubnetId" type:"string"`
}

// String returns the string representation
func (s DeleteSubnetInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSubnetInput) GoString() string {
	return s.String()
}

// SetSubnetId sets the SubnetId field's value.
func (s *DeleteSubnetInput) SetSubnetId(v string) *DeleteSubnetInput {
	s.SubnetId = &v
	return s
}

type DeleteSubnetOutput struct {
	_ struct{} `type:"structure"`

	Response *DeleteSecurityGroup `type:"structure"`
}

// String returns the string representation
func (s DeleteSubnetOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSubnetOutput) GoString() string {
	return s.String()
}

// SetResponse sets the Response field's value.
func (s *DeleteSubnetOutput) SetResponse(v *DeleteSecurityGroup) *DeleteSubnetOutput {
	s.Response = v
	return s
}

type DeleteVpcInput struct {
	_ struct{} `type:"structure"`

	VpcId *string `locationName:"VpcId" type:"string"`
}

// String returns the string representation
func (s DeleteVpcInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteVpcInput) GoString() string {
	return s.String()
}

// SetVpcId sets the VpcId field's value.
func (s *DeleteVpcInput) SetVpcId(v string) *DeleteVpcInput {
	s.VpcId = &v
	return s
}

type DeleteVpcOutput struct {
	_ struct{} `type:"structure"`

	Response *DeleteSecurityGroup `type:"structure"`
}

// String returns the string representation
func (s DeleteVpcOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteVpcOutput) GoString() string {
	return s.String()
}

// SetResponse sets the Response field's value.
func (s *DeleteVpcOutput) SetResponse(v *DeleteSecurityGroup) *DeleteVpcOutput {
	s.Response = v
	return s
}

type DescribeSecurityGroupPolicies struct {
	_ struct{} `type:"structure"`

	RequestID *string `locationName:"RequestId" type:"string"`

	SecurityGroupPolicySet *SecurityGroupPolicyData `locationName:"SecurityGroupPolicySet" type:"structure"`
}

// String returns the string representation
func (s DescribeSecurityGroupPolicies) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSecurityGroupPolicies) GoString() string {
	return s.String()
}

// SetRequestID sets the RequestID field's value.
func (s *DescribeSecurityGroupPolicies) SetRequestID(v string) *DescribeSecurityGroupPolicies {
	s.RequestID = &v
	return s
}

// SetSecurityGroupPolicySet sets the SecurityGroupPolicySet field's value.
func (s *DescribeSecurityGroupPolicies) SetSecurityGroupPolicySet(v *SecurityGroupPolicyData) *DescribeSecurityGroupPolicies {
	s.SecurityGroupPolicySet = v
	return s
}

type DescribeSecurityGroupPoliciesInput struct {
	_ struct{} `type:"structure"`

	// SecurityGroupId is a required field
	SecurityGroupId *string `locationName:"SecurityGroupId" type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeSecurityGroupPoliciesInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSecurityGroupPoliciesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeSecurityGroupPoliciesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeSecurityGroupPoliciesInput"}
	if s.SecurityGroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("SecurityGroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSecurityGroupId sets the SecurityGroupId field's value.
func (s *DescribeSecurityGroupPoliciesInput) SetSecurityGroupId(v string) *DescribeSecurityGroupPoliciesInput {
	s.SecurityGroupId = &v
	return s
}

type DescribeSecurityGroupPoliciesOutput struct {
	_ struct{} `type:"structure"`

	Response *DescribeSecurityGroupPolicies `type:"structure"`
}

// String returns the string representation
func (s DescribeSecurityGroupPoliciesOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSecurityGroupPoliciesOutput) GoString() string {
	return s.String()
}

// SetResponse sets the Response field's value.
func (s *DescribeSecurityGroupPoliciesOutput) SetResponse(v *DescribeSecurityGroupPolicies) *DescribeSecurityGroupPoliciesOutput {
	s.Response = v
	return s
}

type DescribeSecurityGroups struct {
	_ struct{} `type:"structure"`

	RequestID *string `locationName:"RequestId" type:"string"`

	SecurityGroupSet []*SecurityGroup `locationName:"SecurityGroupSet" type:"list"`

	TotalCount *int64 `locationName:"TotalCount" type:"integer"`
}

// String returns the string representation
func (s DescribeSecurityGroups) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSecurityGroups) GoString() string {
	return s.String()
}

// SetRequestID sets the RequestID field's value.
func (s *DescribeSecurityGroups) SetRequestID(v string) *DescribeSecurityGroups {
	s.RequestID = &v
	return s
}

// SetSecurityGroupSet sets the SecurityGroupSet field's value.
func (s *DescribeSecurityGroups) SetSecurityGroupSet(v []*SecurityGroup) *DescribeSecurityGroups {
	s.SecurityGroupSet = v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeSecurityGroups) SetTotalCount(v int64) *DescribeSecurityGroups {
	s.TotalCount = &v
	return s
}

type DescribeSecurityGroupsInput struct {
	_ struct{} `type:"structure"`

	Filters []*Filter `locationName:"Filters" locationNameList:"Filter" type:"list" flattened:"true"`

	Limit *int64 `type:"integer"`

	Offset *int64 `type:"integer"`

	SecurityGroupIds []*string `locationName:"SecurityGroupIds" locationNameList:"SecurityGroupIds" type:"list" flattened:"true"`
}

// String returns the string representation
func (s DescribeSecurityGroupsInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSecurityGroupsInput) GoString() string {
	return s.String()
}

// SetFilters sets the Filters field's value.
func (s *DescribeSecurityGroupsInput) SetFilters(v []*Filter) *DescribeSecurityGroupsInput {
	s.Filters = v
	return s
}

// SetLimit sets the Limit field's value.
func (s *DescribeSecurityGroupsInput) SetLimit(v int64) *DescribeSecurityGroupsInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *DescribeSecurityGroupsInput) SetOffset(v int64) *DescribeSecurityGroupsInput {
	s.Offset = &v
	return s
}

// SetSecurityGroupIds sets the SecurityGroupIds field's value.
func (s *DescribeSecurityGroupsInput) SetSecurityGroupIds(v []*string) *DescribeSecurityGroupsInput {
	s.SecurityGroupIds = v
	return s
}

type DescribeSecurityGroupsOutput struct {
	_ struct{} `type:"structure"`

	Response *DescribeSecurityGroups `type:"structure"`
}

// String returns the string representation
func (s DescribeSecurityGroupsOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSecurityGroupsOutput) GoString() string {
	return s.String()
}

// SetResponse sets the Response field's value.
func (s *DescribeSecurityGroupsOutput) SetResponse(v *DescribeSecurityGroups) *DescribeSecurityGroupsOutput {
	s.Response = v
	return s
}

type DescribeSubnets struct {
	_ struct{} `type:"structure"`

	RequestID *string `locationName:"RequestId" type:"string"`

	SubnetSet []*Subnet `locationName:"SubnetSet" type:"list" flattened:"true"`

	TotalCount *int64 `locationName:"TotalCount" type:"integer"`
}

// String returns the string representation
func (s DescribeSubnets) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSubnets) GoString() string {
	return s.String()
}

// SetRequestID sets the RequestID field's value.
func (s *DescribeSubnets) SetRequestID(v string) *DescribeSubnets {
	s.RequestID = &v
	return s
}

// SetSubnetSet sets the SubnetSet field's value.
func (s *DescribeSubnets) SetSubnetSet(v []*Subnet) *DescribeSubnets {
	s.SubnetSet = v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeSubnets) SetTotalCount(v int64) *DescribeSubnets {
	s.TotalCount = &v
	return s
}

type DescribeSubnetsInput struct {
	_ struct{} `type:"structure"`

	Filters []*Filter `locationName:"Filters" locationNameList:"Filter" type:"list" flattened:"true"`

	Limit *int64 `locationName:"Limit," type:"integer"`

	Offset *int64 `locationName:"Offset," type:"integer"`

	SubnetIds []*string `locationName:"SubnetIds" type:"list" flattened:"true"`
}

// String returns the string representation
func (s DescribeSubnetsInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSubnetsInput) GoString() string {
	return s.String()
}

// SetFilters sets the Filters field's value.
func (s *DescribeSubnetsInput) SetFilters(v []*Filter) *DescribeSubnetsInput {
	s.Filters = v
	return s
}

// SetLimit sets the Limit field's value.
func (s *DescribeSubnetsInput) SetLimit(v int64) *DescribeSubnetsInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *DescribeSubnetsInput) SetOffset(v int64) *DescribeSubnetsInput {
	s.Offset = &v
	return s
}

// SetSubnetIds sets the SubnetIds field's value.
func (s *DescribeSubnetsInput) SetSubnetIds(v []*string) *DescribeSubnetsInput {
	s.SubnetIds = v
	return s
}

type DescribeSubnetsOutput struct {
	_ struct{} `type:"structure"`

	Response *DescribeSubnets `type:"structure"`
}

// String returns the string representation
func (s DescribeSubnetsOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSubnetsOutput) GoString() string {
	return s.String()
}

// SetResponse sets the Response field's value.
func (s *DescribeSubnetsOutput) SetResponse(v *DescribeSubnets) *DescribeSubnetsOutput {
	s.Response = v
	return s
}

type DescribeVpcs struct {
	_ struct{} `type:"structure"`

	RequestID *string `locationName:"RequestId" type:"string"`

	TotalCount *int64 `locationName:"TotalCount" type:"integer"`

	VpcSet []*Vpc `locationName:"VpcSet" type:"list"`
}

// String returns the string representation
func (s DescribeVpcs) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeVpcs) GoString() string {
	return s.String()
}

// SetRequestID sets the RequestID field's value.
func (s *DescribeVpcs) SetRequestID(v string) *DescribeVpcs {
	s.RequestID = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeVpcs) SetTotalCount(v int64) *DescribeVpcs {
	s.TotalCount = &v
	return s
}

// SetVpcSet sets the VpcSet field's value.
func (s *DescribeVpcs) SetVpcSet(v []*Vpc) *DescribeVpcs {
	s.VpcSet = v
	return s
}

type DescribeVpcsInput struct {
	_ struct{} `type:"structure"`

	Filters []*Filter `locationName:"Filters" locationNameList:"Filter" type:"list" flattened:"true"`

	Limit *int64 `locationName:"Limit," type:"integer"`

	Offset *int64 `locationName:"Offset," type:"integer"`

	VpcIds []*string `locationName:"VpcIds" type:"list" flattened:"true"`
}

// String returns the string representation
func (s DescribeVpcsInput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeVpcsInput) GoString() string {
	return s.String()
}

// SetFilters sets the Filters field's value.
func (s *DescribeVpcsInput) SetFilters(v []*Filter) *DescribeVpcsInput {
	s.Filters = v
	return s
}

// SetLimit sets the Limit field's value.
func (s *DescribeVpcsInput) SetLimit(v int64) *DescribeVpcsInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *DescribeVpcsInput) SetOffset(v int64) *DescribeVpcsInput {
	s.Offset = &v
	return s
}

// SetVpcIds sets the VpcIds field's value.
func (s *DescribeVpcsInput) SetVpcIds(v []*string) *DescribeVpcsInput {
	s.VpcIds = v
	return s
}

type DescribeVpcsOutput struct {
	_ struct{} `type:"structure"`

	Response *DescribeVpcs `type:"structure"`
}

// String returns the string representation
func (s DescribeVpcsOutput) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeVpcsOutput) GoString() string {
	return s.String()
}

// SetResponse sets the Response field's value.
func (s *DescribeVpcsOutput) SetResponse(v *DescribeVpcs) *DescribeVpcsOutput {
	s.Response = v
	return s
}

type Filter struct {
	_ struct{} `type:"structure"`

	Name *string `type:"string"`

	Values []*string `type:"list" flattened:"true"`
}

// String returns the string representation
func (s Filter) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s Filter) GoString() string {
	return s.String()
}

// SetName sets the Name field's value.
func (s *Filter) SetName(v string) *Filter {
	s.Name = &v
	return s
}

// SetValues sets the Values field's value.
func (s *Filter) SetValues(v []*string) *Filter {
	s.Values = v
	return s
}

type SecurityGroup struct {
	_ struct{} `type:"structure"`

	CreatedTime *string `locationName:"CreatedTime" type:"string"`

	IsDefault *bool `locationName:"IsDefault" type:"boolean"`

	ProjectId *string `locationName:"ProjectId" type:"string"`

	SecurityGroupDesc *string `locationName:"SecurityGroupDesc" type:"string"`

	SecurityGroupId *string `locationName:"SecurityGroupId" type:"string"`

	SecurityGroupName *string `locationName:"SecurityGroupName" type:"string"`
}

// String returns the string representation
func (s SecurityGroup) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s SecurityGroup) GoString() string {
	return s.String()
}

// SetCreatedTime sets the CreatedTime field's value.
func (s *SecurityGroup) SetCreatedTime(v string) *SecurityGroup {
	s.CreatedTime = &v
	return s
}

// SetIsDefault sets the IsDefault field's value.
func (s *SecurityGroup) SetIsDefault(v bool) *SecurityGroup {
	s.IsDefault = &v
	return s
}

// SetProjectId sets the ProjectId field's value.
func (s *SecurityGroup) SetProjectId(v string) *SecurityGroup {
	s.ProjectId = &v
	return s
}

// SetSecurityGroupDesc sets the SecurityGroupDesc field's value.
func (s *SecurityGroup) SetSecurityGroupDesc(v string) *SecurityGroup {
	s.SecurityGroupDesc = &v
	return s
}

// SetSecurityGroupId sets the SecurityGroupId field's value.
func (s *SecurityGroup) SetSecurityGroupId(v string) *SecurityGroup {
	s.SecurityGroupId = &v
	return s
}

// SetSecurityGroupName sets the SecurityGroupName field's value.
func (s *SecurityGroup) SetSecurityGroupName(v string) *SecurityGroup {
	s.SecurityGroupName = &v
	return s
}

type SecurityGroupPolicy struct {
	_ struct{} `type:"structure"`

	Action *string `locationName:"Action" type:"string"`

	AddressTemplate *string `locationName:"AddressTemplate" type:"string"`

	CidrBlock *string `locationName:"CidrBlock" type:"string"`

	PolicyDescription *string `locationName:"PolicyDescription" type:"string"`

	PolicyIndex *int64 `locationName:"PolicyIndex" type:"integer"`

	Port *string `locationName:"Port" type:"string"`

	Protocol *string `locationName:"Protocol" type:"string"`

	SecurityGroupId *string `locationName:"SecurityGroupId" type:"string"`

	ServiceTemplate *string `locationName:"ServiceTemplate" type:"string"`
}

// String returns the string representation
func (s SecurityGroupPolicy) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s SecurityGroupPolicy) GoString() string {
	return s.String()
}

// SetAction sets the Action field's value.
func (s *SecurityGroupPolicy) SetAction(v string) *SecurityGroupPolicy {
	s.Action = &v
	return s
}

// SetAddressTemplate sets the AddressTemplate field's value.
func (s *SecurityGroupPolicy) SetAddressTemplate(v string) *SecurityGroupPolicy {
	s.AddressTemplate = &v
	return s
}

// SetCidrBlock sets the CidrBlock field's value.
func (s *SecurityGroupPolicy) SetCidrBlock(v string) *SecurityGroupPolicy {
	s.CidrBlock = &v
	return s
}

// SetPolicyDescription sets the PolicyDescription field's value.
func (s *SecurityGroupPolicy) SetPolicyDescription(v string) *SecurityGroupPolicy {
	s.PolicyDescription = &v
	return s
}

// SetPolicyIndex sets the PolicyIndex field's value.
func (s *SecurityGroupPolicy) SetPolicyIndex(v int64) *SecurityGroupPolicy {
	s.PolicyIndex = &v
	return s
}

// SetPort sets the Port field's value.
func (s *SecurityGroupPolicy) SetPort(v string) *SecurityGroupPolicy {
	s.Port = &v
	return s
}

// SetProtocol sets the Protocol field's value.
func (s *SecurityGroupPolicy) SetProtocol(v string) *SecurityGroupPolicy {
	s.Protocol = &v
	return s
}

// SetSecurityGroupId sets the SecurityGroupId field's value.
func (s *SecurityGroupPolicy) SetSecurityGroupId(v string) *SecurityGroupPolicy {
	s.SecurityGroupId = &v
	return s
}

// SetServiceTemplate sets the ServiceTemplate field's value.
func (s *SecurityGroupPolicy) SetServiceTemplate(v string) *SecurityGroupPolicy {
	s.ServiceTemplate = &v
	return s
}

type SecurityGroupPolicyData struct {
	_ struct{} `type:"structure"`

	Egress []*SecurityGroupPolicy `locationName:"Egress" type:"list" flattened:"true"`

	Ingress []*SecurityGroupPolicy `locationName:"Ingress" type:"list" flattened:"true"`

	Version *int64 `locationName:"Version" type:"integer"`
}

// String returns the string representation
func (s SecurityGroupPolicyData) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s SecurityGroupPolicyData) GoString() string {
	return s.String()
}

// SetEgress sets the Egress field's value.
func (s *SecurityGroupPolicyData) SetEgress(v []*SecurityGroupPolicy) *SecurityGroupPolicyData {
	s.Egress = v
	return s
}

// SetIngress sets the Ingress field's value.
func (s *SecurityGroupPolicyData) SetIngress(v []*SecurityGroupPolicy) *SecurityGroupPolicyData {
	s.Ingress = v
	return s
}

// SetVersion sets the Version field's value.
func (s *SecurityGroupPolicyData) SetVersion(v int64) *SecurityGroupPolicyData {
	s.Version = &v
	return s
}

type Subnet struct {
	_ struct{} `type:"structure"`

	AvailableIpAddressCount *int64 `locationName:"AvailableIpAddressCount" type:"integer"`

	CidrBlock *string `locationName:"CidrBlock" type:"string"`

	CreatedTime *string `locationName:"CreatedTime" type:"string"`

	EnableBroadcast *bool `locationName:"EnableBroadcast" type:"boolean"`

	IsDefault *bool `locationName:"IsDefault" type:"boolean"`

	RouteTableId *string `locationName:"RouteTableId" type:"string"`

	SubnetId *string `locationName:"SubnetId" type:"string"`

	SubnetName *string `locationName:"SubnetName" type:"string"`

	VpcId *string `locationName:"VpcId" type:"string"`

	Zone *int64 `locationName:"Zone" type:"integer"`
}

// String returns the string representation
func (s Subnet) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s Subnet) GoString() string {
	return s.String()
}

// SetAvailableIpAddressCount sets the AvailableIpAddressCount field's value.
func (s *Subnet) SetAvailableIpAddressCount(v int64) *Subnet {
	s.AvailableIpAddressCount = &v
	return s
}

// SetCidrBlock sets the CidrBlock field's value.
func (s *Subnet) SetCidrBlock(v string) *Subnet {
	s.CidrBlock = &v
	return s
}

// SetCreatedTime sets the CreatedTime field's value.
func (s *Subnet) SetCreatedTime(v string) *Subnet {
	s.CreatedTime = &v
	return s
}

// SetEnableBroadcast sets the EnableBroadcast field's value.
func (s *Subnet) SetEnableBroadcast(v bool) *Subnet {
	s.EnableBroadcast = &v
	return s
}

// SetIsDefault sets the IsDefault field's value.
func (s *Subnet) SetIsDefault(v bool) *Subnet {
	s.IsDefault = &v
	return s
}

// SetRouteTableId sets the RouteTableId field's value.
func (s *Subnet) SetRouteTableId(v string) *Subnet {
	s.RouteTableId = &v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *Subnet) SetSubnetId(v string) *Subnet {
	s.SubnetId = &v
	return s
}

// SetSubnetName sets the SubnetName field's value.
func (s *Subnet) SetSubnetName(v string) *Subnet {
	s.SubnetName = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *Subnet) SetVpcId(v string) *Subnet {
	s.VpcId = &v
	return s
}

// SetZone sets the Zone field's value.
func (s *Subnet) SetZone(v int64) *Subnet {
	s.Zone = &v
	return s
}

type Vpc struct {
	_ struct{} `type:"structure"`

	CidrBlock *string `locationName:"CidrBlock" type:"string"`

	CreatedTime *string `locationName:"CreatedTime" type:"string"`

	EnableMulticast *bool `locationName:"EnableMulticast" type:"boolean"`

	IsDefault *bool `locationName:"IsDefault" type:"boolean"`

	VpcId *string `locationName:"VpcId" type:"string"`

	VpcName *string `locationName:"VpcName" type:"string"`
}

// String returns the string representation
func (s Vpc) String() string {
	return sdfutil.Prettify(s)
}

// GoString returns the string representation
func (s Vpc) GoString() string {
	return s.String()
}

// SetCidrBlock sets the CidrBlock field's value.
func (s *Vpc) SetCidrBlock(v string) *Vpc {
	s.CidrBlock = &v
	return s
}

// SetCreatedTime sets the CreatedTime field's value.
func (s *Vpc) SetCreatedTime(v string) *Vpc {
	s.CreatedTime = &v
	return s
}

// SetEnableMulticast sets the EnableMulticast field's value.
func (s *Vpc) SetEnableMulticast(v bool) *Vpc {
	s.EnableMulticast = &v
	return s
}

// SetIsDefault sets the IsDefault field's value.
func (s *Vpc) SetIsDefault(v bool) *Vpc {
	s.IsDefault = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *Vpc) SetVpcId(v string) *Vpc {
	s.VpcId = &v
	return s
}

// SetVpcName sets the VpcName field's value.
func (s *Vpc) SetVpcName(v string) *Vpc {
	s.VpcName = &v
	return s
}
